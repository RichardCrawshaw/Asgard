using System;

/*  This file is automatically generated by a T4 template from a data file.
    cbus-4.0-Rev-8d-Guide-6b-opcodes
    It was last generated at 01/27/2022 21:27:11.
    Any changes made manually will be lost when the file is regenerated.
*/

namespace Asgard.Data
{
    #region Licence

/*
 *	This work is licensed under the:
 *	    Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 *	To view a copy of this license, visit:
 *	    http://creativecommons.org/licenses/by-nc-sa/4.0/
 *	or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *	
 *	License summary:
 *	  You are free to:
 *	    Share, copy and redistribute the material in any medium or format
 *	    Adapt, remix, transform, and build upon the material
 *	
 *	  The licensor cannot revoke these freedoms as long as you follow the license terms.
 *	
 *	  Attribution : You must give appropriate credit, provide a link to the license,
 *	                 and indicate if changes were made. You may do so in any reasonable manner,
 *	                 but not in any way that suggests the licensor endorses you or your use.
 *	
 *	  NonCommercial : You may not use the material for commercial purposes. **(see note below)
 *	
 *	  ShareAlike : If you remix, transform, or build upon the material, you must distribute
 *	                your contributions under the same license as the original.
 *	
 *	  No additional restrictions : You may not apply legal terms or technological measures that
 *	                                legally restrict others from doing anything the license permits.
 *	
 *	 ** For commercial use, please contact the original copyright holder(s) to agree licensing terms
 *	
 *	  This software is distributed in the hope that it will be useful, but WITHOUT ANY
 *	  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE

 *  */
    #endregion

    #region History

/*  Date		Author
 *	2021-11-06	Richard Crawshaw	Original from Developers' Guide for CBUS version 6b

 *  */

    #endregion

    #region OpCodes

    #region 0x00 ACK General Acknowledgement

    /// <summary>
	/// ACK
    /// General Acknowledgement
    /// Positive response to query / request performed or report of availability on-line.
    /// </summary>
    [OpCode(
        Code = "ACK", 
        Description = "Positive response to query / request performed or report of availability on-line.",
        Group = "General", 
        Name = "General Acknowledgement", 
        Number = 0, 
        Priority = 2)]
    public partial class GeneralAcknowledgement : OpCodeData0, // 0x00
        IGeneralAcknowledgement
    {
        #region Fields

        public const string CODE = "ACK";
        public const string DESCRIPTION = "Positive response to query / request performed or report of availability on-line.";
        public const OpCodeGroup GROUP = OpCodeGroup.General;
        public const string NAME = "General Acknowledgement";
        public const byte NUMBER = 0x00; // 0
        public const int PRIORITY = 2;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Constructors

        public GeneralAcknowledgement(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public GeneralAcknowledgement() : base(CbusMessage.Create(new byte[] {0})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code}";

        #endregion
	}
	
    #endregion

    #region 0x01 NAK General No Acknowledgement

    /// <summary>
	/// NAK
    /// General No Acknowledgement
    /// Negative response to query / request denied.
    /// </summary>
    [OpCode(
        Code = "NAK", 
        Description = "Negative response to query / request denied.",
        Group = "General", 
        Name = "General No Acknowledgement", 
        Number = 1, 
        Priority = 2)]
    public partial class GeneralNoAcknowledgement : OpCodeData0, // 0x01
        IGeneralNoAcknowledgement
    {
        #region Fields

        public const string CODE = "NAK";
        public const string DESCRIPTION = "Negative response to query / request denied.";
        public const OpCodeGroup GROUP = OpCodeGroup.General;
        public const string NAME = "General No Acknowledgement";
        public const byte NUMBER = 0x01; // 1
        public const int PRIORITY = 2;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Constructors

        public GeneralNoAcknowledgement(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public GeneralNoAcknowledgement() : base(CbusMessage.Create(new byte[] {1})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code}";

        #endregion
	}
	
    #endregion

    #region 0x02 HLT Bus Halt

    /// <summary>
	/// HLT
    /// Bus Halt
    /// Commonly broadcasted to all nodes to indicate CBUS is not available and no further packets should be sent until a BON or ARST is received.
    /// </summary>
    [OpCode(
        Code = "HLT", 
        Description = "Commonly broadcasted to all nodes to indicate CBUS is not available and no further packets should be sent until a BON or ARST is received.",
        Group = "General", 
        Name = "Bus Halt", 
        Number = 2, 
        Priority = 0)]
    public partial class BusHalt : OpCodeData0, // 0x02
        IBusHalt
    {
        #region Fields

        public const string CODE = "HLT";
        public const string DESCRIPTION = "Commonly broadcasted to all nodes to indicate CBUS is not available and no further packets should be sent until a BON or ARST is received.";
        public const OpCodeGroup GROUP = OpCodeGroup.General;
        public const string NAME = "Bus Halt";
        public const byte NUMBER = 0x02; // 2
        public const int PRIORITY = 0;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Constructors

        public BusHalt(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public BusHalt() : base(CbusMessage.Create(new byte[] {2})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code}";

        #endregion
	}
	
    #endregion

    #region 0x03 BON Bus On

    /// <summary>
	/// BON
    /// Bus On
    /// Commonly broadcasted to all nodes to indicate CBUS is available following a HLT.
    /// </summary>
    [OpCode(
        Code = "BON", 
        Description = "Commonly broadcasted to all nodes to indicate CBUS is available following a HLT.",
        Group = "General", 
        Name = "Bus On", 
        Number = 3, 
        Priority = 1)]
    public partial class BusOn : OpCodeData0, // 0x03
        IBusOn
    {
        #region Fields

        public const string CODE = "BON";
        public const string DESCRIPTION = "Commonly broadcasted to all nodes to indicate CBUS is available following a HLT.";
        public const OpCodeGroup GROUP = OpCodeGroup.General;
        public const string NAME = "Bus On";
        public const byte NUMBER = 0x03; // 3
        public const int PRIORITY = 1;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Constructors

        public BusOn(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public BusOn() : base(CbusMessage.Create(new byte[] {3})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code}";

        #endregion
	}
	
    #endregion

    #region 0x04 TOF Track Off

    /// <summary>
	/// TOF
    /// Track Off
    /// Commonly broadcasted to all nodes by a command station to indicate track power is off and no further command packets should be sent
    /// </summary>
    [OpCode(
        Code = "TOF", 
        Description = "Commonly broadcasted to all nodes by a command station to indicate track power is off and no further command packets should be sent",
        Group = "DCC", 
        Name = "Track Off", 
        Number = 4, 
        Priority = 1)]
    public partial class TrackOff : OpCodeData0, // 0x04
        ITrackOff
    {
        #region Fields

        public const string CODE = "TOF";
        public const string DESCRIPTION = "Commonly broadcasted to all nodes by a command station to indicate track power is off and no further command packets should be sent";
        public const OpCodeGroup GROUP = OpCodeGroup.DCC;
        public const string NAME = "Track Off";
        public const byte NUMBER = 0x04; // 4
        public const int PRIORITY = 1;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Constructors

        public TrackOff(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public TrackOff() : base(CbusMessage.Create(new byte[] {4})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code}";

        #endregion
	}
	
    #endregion

    #region 0x05 TON Track On

    /// <summary>
	/// TON
    /// Track On
    /// Commonly broadcasted to all nodes by a command station to indicate track power is on.
    /// </summary>
    [OpCode(
        Code = "TON", 
        Description = "Commonly broadcasted to all nodes by a command station to indicate track power is on.",
        Group = "DCC", 
        Name = "Track On", 
        Number = 5, 
        Priority = 1)]
    public partial class TrackOn : OpCodeData0, // 0x05
        ITrackOn
    {
        #region Fields

        public const string CODE = "TON";
        public const string DESCRIPTION = "Commonly broadcasted to all nodes by a command station to indicate track power is on.";
        public const OpCodeGroup GROUP = OpCodeGroup.DCC;
        public const string NAME = "Track On";
        public const byte NUMBER = 0x05; // 5
        public const int PRIORITY = 1;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Constructors

        public TrackOn(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public TrackOn() : base(CbusMessage.Create(new byte[] {5})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code}";

        #endregion
	}
	
    #endregion

    #region 0x06 ESTOP Emergency Stop

    /// <summary>
	/// ESTOP
    /// Emergency Stop
    /// Commonly broadcast to all nodes by a command station to indicate all engines have been emergency stopped.
    /// </summary>
    [OpCode(
        Code = "ESTOP", 
        Description = "Commonly broadcast to all nodes by a command station to indicate all engines have been emergency stopped.",
        Group = "DCC", 
        Name = "Emergency Stop", 
        Number = 6, 
        Priority = 1)]
    public partial class EmergencyStop : OpCodeData0, // 0x06
        IEmergencyStop
    {
        #region Fields

        public const string CODE = "ESTOP";
        public const string DESCRIPTION = "Commonly broadcast to all nodes by a command station to indicate all engines have been emergency stopped.";
        public const OpCodeGroup GROUP = OpCodeGroup.DCC;
        public const string NAME = "Emergency Stop";
        public const byte NUMBER = 0x06; // 6
        public const int PRIORITY = 1;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Constructors

        public EmergencyStop(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public EmergencyStop() : base(CbusMessage.Create(new byte[] {6})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code}";

        #endregion
	}
	
    #endregion

    #region 0x07 ARST System Reset

    /// <summary>
	/// ARST
    /// System Reset
    /// Commonly broadcasted to all nodes to indicate a full system reset.
    /// </summary>
    [OpCode(
        Code = "ARST", 
        Description = "Commonly broadcasted to all nodes to indicate a full system reset.",
        Group = "General", 
        Name = "System Reset", 
        Number = 7, 
        Priority = 0)]
    public partial class SystemReset : OpCodeData0, // 0x07
        ISystemReset
    {
        #region Fields

        public const string CODE = "ARST";
        public const string DESCRIPTION = "Commonly broadcasted to all nodes to indicate a full system reset.";
        public const OpCodeGroup GROUP = OpCodeGroup.General;
        public const string NAME = "System Reset";
        public const byte NUMBER = 0x07; // 7
        public const int PRIORITY = 0;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Constructors

        public SystemReset(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public SystemReset() : base(CbusMessage.Create(new byte[] {7})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code}";

        #endregion
	}
	
    #endregion

    #region 0x08 RTOF Request Track Off

    /// <summary>
	/// RTOF
    /// Request Track Off
    /// Sent to request change of track power state to “off”.
    /// </summary>
    [OpCode(
        Code = "RTOF", 
        Description = "Sent to request change of track power state to “off”.",
        Group = "DCC", 
        Name = "Request Track Off", 
        Number = 8, 
        Priority = 1)]
    public partial class RequestTrackOff : OpCodeData0, // 0x08
        IRequestTrackOff
    {
        #region Fields

        public const string CODE = "RTOF";
        public const string DESCRIPTION = "Sent to request change of track power state to “off”.";
        public const OpCodeGroup GROUP = OpCodeGroup.DCC;
        public const string NAME = "Request Track Off";
        public const byte NUMBER = 0x08; // 8
        public const int PRIORITY = 1;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Constructors

        public RequestTrackOff(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public RequestTrackOff() : base(CbusMessage.Create(new byte[] {8})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code}";

        #endregion
	}
	
    #endregion

    #region 0x09 RTON Request Track On

    /// <summary>
	/// RTON
    /// Request Track On
    /// Sent to request change of track power state to “on”.
    /// </summary>
    [OpCode(
        Code = "RTON", 
        Description = "Sent to request change of track power state to “on”.",
        Group = "DCC", 
        Name = "Request Track On", 
        Number = 9, 
        Priority = 1)]
    public partial class RequestTrackOn : OpCodeData0, // 0x09
        IRequestTrackOn
    {
        #region Fields

        public const string CODE = "RTON";
        public const string DESCRIPTION = "Sent to request change of track power state to “on”.";
        public const OpCodeGroup GROUP = OpCodeGroup.DCC;
        public const string NAME = "Request Track On";
        public const byte NUMBER = 0x09; // 9
        public const int PRIORITY = 1;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Constructors

        public RequestTrackOn(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public RequestTrackOn() : base(CbusMessage.Create(new byte[] {9})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code}";

        #endregion
	}
	
    #endregion

    #region 0x0A RESTP Request Emergency Stop All

    /// <summary>
	/// RESTP
    /// Request Emergency Stop All
    /// Sent to request an emergency stop to all trains . Does not affect accessory control.
    /// </summary>
    [OpCode(
        Code = "RESTP", 
        Description = "Sent to request an emergency stop to all trains . Does not affect accessory control.",
        Group = "DCC", 
        Name = "Request Emergency Stop All", 
        Number = 10, 
        Priority = 0)]
    public partial class RequestEmergencyStopAll : OpCodeData0, // 0x0A
        IRequestEmergencyStopAll
    {
        #region Fields

        public const string CODE = "RESTP";
        public const string DESCRIPTION = "Sent to request an emergency stop to all trains . Does not affect accessory control.";
        public const OpCodeGroup GROUP = OpCodeGroup.DCC;
        public const string NAME = "Request Emergency Stop All";
        public const byte NUMBER = 0x0A; // 10
        public const int PRIORITY = 0;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Constructors

        public RequestEmergencyStopAll(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public RequestEmergencyStopAll() : base(CbusMessage.Create(new byte[] {10})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code}";

        #endregion
	}
	
    #endregion

    #region 0x0C RSTAT Request Command Station Status

    /// <summary>
	/// RSTAT
    /// Request Command Station Status
    /// Sent to query the status of the command station.
    /// </summary>
    [OpCode(
        Code = "RSTAT", 
        Description = "Sent to query the status of the command station.",
        Group = "Config", 
        Name = "Request Command Station Status", 
        Number = 12, 
        Priority = 2)]
    public partial class RequestCommandStationStatus : OpCodeData0, // 0x0C
        IRequestCommandStationStatus
    {
        #region Fields

        public const string CODE = "RSTAT";
        public const string DESCRIPTION = "Sent to query the status of the command station.";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Request Command Station Status";
        public const byte NUMBER = 0x0C; // 12
        public const int PRIORITY = 2;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Constructors

        public RequestCommandStationStatus(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public RequestCommandStationStatus() : base(CbusMessage.Create(new byte[] {12})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code}";

        #endregion
	}
	
    #endregion

    #region 0x0D QNN Query Node Number

    /// <summary>
	/// QNN
    /// Query Node Number
    /// Sent by a node to elicit a PNN reply from each node on the bus that has a node number.
    /// </summary>
    [OpCode(
        Code = "QNN", 
        Description = "Sent by a node to elicit a PNN reply from each node on the bus that has a node number.",
        Group = "Config", 
        Name = "Query Node Number", 
        Number = 13, 
        Priority = 3)]
    public partial class QueryNodeNumber : OpCodeData0, // 0x0D
        IQueryNodeNumber
    {
        #region Fields

        public const string CODE = "QNN";
        public const string DESCRIPTION = "Sent by a node to elicit a PNN reply from each node on the bus that has a node number.";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Query Node Number";
        public const byte NUMBER = 0x0D; // 13
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Constructors

        public QueryNodeNumber(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public QueryNodeNumber() : base(CbusMessage.Create(new byte[] {13})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code}";

        #endregion
	}
	
    #endregion

    #region 0x10 RQNP Request node parameters

    /// <summary>
	/// RQNP
    /// Request node parameters
    /// Sent to a node while in ‘setup’ mode to read its parameter set.
    /// </summary>
    [OpCode(
        Code = "RQNP", 
        Description = "Sent to a node while in ‘setup’ mode to read its parameter set.",
        Group = "Config", 
        Name = "Request node parameters", 
        Number = 16, 
        Priority = 3)]
    public partial class RequestNodeParameters : OpCodeData0, // 0x10
        IRequestNodeParameters
    {
        #region Fields

        public const string CODE = "RQNP";
        public const string DESCRIPTION = "Sent to a node while in ‘setup’ mode to read its parameter set.";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Request node parameters";
        public const byte NUMBER = 0x10; // 16
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Constructors

        public RequestNodeParameters(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public RequestNodeParameters() : base(CbusMessage.Create(new byte[] {16})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code}";

        #endregion
	}
	
    #endregion

    #region 0x11 RQMN Request module name

    /// <summary>
	/// RQMN
    /// Request module name
    /// Sent by a node to request the name of the type of module that is in setup mode.
    /// </summary>
    [OpCode(
        Code = "RQMN", 
        Description = "Sent by a node to request the name of the type of module that is in setup mode.",
        Group = "Config", 
        Name = "Request module name", 
        Number = 17, 
        Priority = 2)]
    public partial class RequestModuleName : OpCodeData0, // 0x11
        IRequestModuleName
    {
        #region Fields

        public const string CODE = "RQMN";
        public const string DESCRIPTION = "Sent by a node to request the name of the type of module that is in setup mode.";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Request module name";
        public const byte NUMBER = 0x11; // 17
        public const int PRIORITY = 2;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Constructors

        public RequestModuleName(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public RequestModuleName() : base(CbusMessage.Create(new byte[] {17})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code}";

        #endregion
	}
	
    #endregion

    #region 0x21 KLOC Release Engine

    /// <summary>
	/// KLOC
    /// Release Engine
    /// Sent by a CAB to the Command Station. The engine with that Session number is removed from the active engine list.
    /// </summary>
    [OpCode(
        Code = "KLOC", 
        Description = "Sent by a CAB to the Command Station. The engine with that Session number is removed from the active engine list.",
        Group = "DCC", 
        Name = "Release Engine", 
        Number = 33, 
        Priority = 2)]
    public partial class ReleaseEngine : OpCodeData1, // 0x21
        IHasSession,
        IReleaseEngine
    {
        #region Fields

        public const string CODE = "KLOC";
        public const string DESCRIPTION = "Sent by a CAB to the Command Station. The engine with that Session number is removed from the active engine list.";
        public const OpCodeGroup GROUP = OpCodeGroup.DCC;
        public const string NAME = "Release Engine";
        public const byte NUMBER = 0x21; // 33
        public const int PRIORITY = 2;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public byte Session
        {
            get => ConvertToByte(1);
            set => ConvertFromByte(1, value);
        }

        #endregion

        #region Constructors

        public ReleaseEngine(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public ReleaseEngine() : base(CbusMessage.Create(new byte[] {33})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} Session: {this.Session}";

        #endregion
	}
	
    #endregion

    #region 0x22 QLOC Query Engine

    /// <summary>
	/// QLOC
    /// Query Engine
    /// The command station responds with PLOC if the session is assigned. Otherwise responds with ERR: engine not found.
    /// </summary>
    [OpCode(
        Code = "QLOC", 
        Description = "The command station responds with PLOC if the session is assigned. Otherwise responds with ERR: engine not found.",
        Group = "DCC", 
        Name = "Query Engine", 
        Number = 34, 
        Priority = 2)]
    public partial class QueryEngine : OpCodeData1, // 0x22
        IHasSession,
        IQueryEngine
    {
        #region Fields

        public const string CODE = "QLOC";
        public const string DESCRIPTION = "The command station responds with PLOC if the session is assigned. Otherwise responds with ERR: engine not found.";
        public const OpCodeGroup GROUP = OpCodeGroup.DCC;
        public const string NAME = "Query Engine";
        public const byte NUMBER = 0x22; // 34
        public const int PRIORITY = 2;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public byte Session
        {
            get => ConvertToByte(1);
            set => ConvertFromByte(1, value);
        }

        #endregion

        #region Constructors

        public QueryEngine(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public QueryEngine() : base(CbusMessage.Create(new byte[] {34})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} Session: {this.Session}";

        #endregion
	}
	
    #endregion

    #region 0x23 DKEEP Session keep alive

    /// <summary>
	/// DKEEP
    /// Session keep alive
    /// The cab sends a keep alive at regular intervals for the active session. The interval between keep alive messages must be less than the session timeout implemented by the command station.
    /// </summary>
    [OpCode(
        Code = "DKEEP", 
        Description = "The cab sends a keep alive at regular intervals for the active session. The interval between keep alive messages must be less than the session timeout implemented by the command station.",
        Group = "DCC", 
        Name = "Session keep alive", 
        Number = 35, 
        Priority = 2)]
    public partial class SessionKeepAlive : OpCodeData1, // 0x23
        IHasSession,
        ISessionKeepAlive
    {
        #region Fields

        public const string CODE = "DKEEP";
        public const string DESCRIPTION = "The cab sends a keep alive at regular intervals for the active session. The interval between keep alive messages must be less than the session timeout implemented by the command station.";
        public const OpCodeGroup GROUP = OpCodeGroup.DCC;
        public const string NAME = "Session keep alive";
        public const byte NUMBER = 0x23; // 35
        public const int PRIORITY = 2;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public byte Session
        {
            get => ConvertToByte(1);
            set => ConvertFromByte(1, value);
        }

        #endregion

        #region Constructors

        public SessionKeepAlive(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public SessionKeepAlive() : base(CbusMessage.Create(new byte[] {35})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} Session: {this.Session}";

        #endregion
	}
	
    #endregion

    #region 0x30 DBG1 Debug with one data byte

    /// <summary>
	/// DBG1
    /// Debug with one data byte
    /// The data is a freeform status byte for debugging during CBUS module development. Not used during normal operation.
    /// </summary>
    [OpCode(
        Code = "DBG1", 
        Description = "The data is a freeform status byte for debugging during CBUS module development. Not used during normal operation.",
        Group = "General", 
        Name = "Debug with one data byte", 
        Number = 48, 
        Priority = 2)]
    public partial class DebugWithOneDataByte : OpCodeData1, // 0x30
        IHasDebugStatus,
        IDebugWithOneDataByte
    {
        #region Fields

        public const string CODE = "DBG1";
        public const string DESCRIPTION = "The data is a freeform status byte for debugging during CBUS module development. Not used during normal operation.";
        public const OpCodeGroup GROUP = OpCodeGroup.General;
        public const string NAME = "Debug with one data byte";
        public const byte NUMBER = 0x30; // 48
        public const int PRIORITY = 2;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public byte DebugStatus
        {
            get => ConvertToByte(1);
            set => ConvertFromByte(1, value);
        }

        #endregion

        #region Constructors

        public DebugWithOneDataByte(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public DebugWithOneDataByte() : base(CbusMessage.Create(new byte[] {48})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} DebugStatus: {this.DebugStatus:X2}";

        #endregion
	}
	
    #endregion

    #region 0x3F EXTC Extended opcode with no data bytes

    /// <summary>
	/// EXTC
    /// Extended opcode with no data bytes
    /// Used if the basic set of 32 OPCs is not enough. Allows an additional 256 opcodes.
    /// </summary>
    [OpCode(
        Code = "EXTC", 
        Description = "Used if the basic set of 32 OPCs is not enough. Allows an additional 256 opcodes.",
        Group = "General", 
        Name = "Extended opcode with no data bytes", 
        Number = 63, 
        Priority = 3)]
    public partial class ExtendedOpcodeWithNoDataBytes : OpCodeData1, // 0x3F
        IHasExtendedOpCode,
        IExtendedOpcodeWithNoDataBytes
    {
        #region Fields

        public const string CODE = "EXTC";
        public const string DESCRIPTION = "Used if the basic set of 32 OPCs is not enough. Allows an additional 256 opcodes.";
        public const OpCodeGroup GROUP = OpCodeGroup.General;
        public const string NAME = "Extended opcode with no data bytes";
        public const byte NUMBER = 0x3F; // 63
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public byte ExtendedOpCode
        {
            get => ConvertToByte(1);
            set => ConvertFromByte(1, value);
        }

        #endregion

        #region Constructors

        public ExtendedOpcodeWithNoDataBytes(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public ExtendedOpcodeWithNoDataBytes() : base(CbusMessage.Create(new byte[] {63})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} ExtendedOpCode: {this.ExtendedOpCode:X2}";

        #endregion
	}
	
    #endregion

    #region 0x40 RLOC Request engine session

    /// <summary>
	/// RLOC
    /// Request engine session
    /// The command station responds with (PLOC) if engine is free and is being assigned. Otherwise responds with (ERR): engine in use or (ERR:) stack full. This command is typically sent by a cab to the command station following a change of the controlled decoder address. RLOC is exactly equivalent to GLOC with all flag bits set to zero
    /// </summary>
    [OpCode(
        Code = "RLOC", 
        Description = "The command station responds with (PLOC) if engine is free and is being assigned. Otherwise responds with (ERR): engine in use or (ERR:) stack full. This command is typically sent by a cab to the command station following a change of the controlled decoder address. RLOC is exactly equivalent to GLOC with all flag bits set to zero",
        Group = "DCC", 
        Name = "Request engine session", 
        Number = 64, 
        Priority = 2)]
    public partial class RequestEngineSession : OpCodeData2, // 0x40
        IHasAddress,
        IRequestEngineSession
    {
        #region Fields

        public const string CODE = "RLOC";
        public const string DESCRIPTION = "The command station responds with (PLOC) if engine is free and is being assigned. Otherwise responds with (ERR): engine in use or (ERR:) stack full. This command is typically sent by a cab to the command station following a change of the controlled decoder address. RLOC is exactly equivalent to GLOC with all flag bits set to zero";
        public const OpCodeGroup GROUP = OpCodeGroup.DCC;
        public const string NAME = "Request engine session";
        public const byte NUMBER = 0x40; // 64
        public const int PRIORITY = 2;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort Address
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }

        #endregion

        #region Constructors

        public RequestEngineSession(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public RequestEngineSession() : base(CbusMessage.Create(new byte[] {64})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} Address: {this.Address}";

        #endregion
	}
	
    #endregion

    #region 0x41 QCON Query Consist

    /// <summary>
	/// QCON
    /// Query Consist
    /// Allows enumeration of a consist. Command station responds with PLOC if an engine exists at the specified index
    /// </summary>
    [OpCode(
        Code = "QCON", 
        Description = "Allows enumeration of a consist. Command station responds with PLOC if an engine exists at the specified index",
        Group = "DCC", 
        Name = "Query Consist", 
        Number = 65, 
        Priority = 2)]
    public partial class QueryConsist : OpCodeData2, // 0x41
        IHasConsist,
        IHasIndex,
        IQueryConsist
    {
        #region Fields

        public const string CODE = "QCON";
        public const string DESCRIPTION = "Allows enumeration of a consist. Command station responds with PLOC if an engine exists at the specified index";
        public const OpCodeGroup GROUP = OpCodeGroup.DCC;
        public const string NAME = "Query Consist";
        public const byte NUMBER = 0x41; // 65
        public const int PRIORITY = 2;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public byte Consist
        {
            get => ConvertToByte(1);
            set => ConvertFromByte(1, value);
        }
        public byte Index
        {
            get => ConvertToByte(2);
            set => ConvertFromByte(2, value);
        }

        #endregion

        #region Constructors

        public QueryConsist(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public QueryConsist() : base(CbusMessage.Create(new byte[] {65})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} Consist: {this.Consist} Index: {this.Index}";

        #endregion
	}
	
    #endregion

    #region 0x42 SNN Set Node Number

    /// <summary>
	/// SNN
    /// Set Node Number
    /// Sent by a configuration tool to assign a node number to a requesting node in response to a RQNN message. The target node must be in ‘setup’ mode.
    /// </summary>
    [OpCode(
        Code = "SNN", 
        Description = "Sent by a configuration tool to assign a node number to a requesting node in response to a RQNN message. The target node must be in ‘setup’ mode.",
        Group = "Config", 
        Name = "Set Node Number", 
        Number = 66, 
        Priority = 3)]
    public partial class SetNodeNumber : OpCodeData2, // 0x42
        IReplyTo<RequestNodeNumber>,
        IHasNodeNumber,
        ISetNodeNumber
    {
        #region Fields

        public const string CODE = "SNN";
        public const string DESCRIPTION = "Sent by a configuration tool to assign a node number to a requesting node in response to a RQNN message. The target node must be in ‘setup’ mode.";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Set Node Number";
        public const byte NUMBER = 0x42; // 66
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }

        #endregion

        #region Constructors

        public SetNodeNumber(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public SetNodeNumber() : base(CbusMessage.Create(new byte[] {66})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber}";

        #endregion
	}
	
    #endregion

    #region 0x43 ALOC Allocate loco to activity

    /// <summary>
	/// ALOC
    /// Allocate loco to activity
    /// Allocate a loco to an activity.
    /// </summary>
    [OpCode(
        Code = "ALOC", 
        Description = "Allocate a loco to an activity.",
        Group = "DCC", 
        Name = "Allocate loco to activity", 
        Number = 67, 
        Priority = 2)]
    public partial class AllocateLocoToActivity : OpCodeData2, // 0x43
        IHasSession,
        IHasAllocationCode,
        IAllocateLocoToActivity
    {
        #region Fields

        public const string CODE = "ALOC";
        public const string DESCRIPTION = "Allocate a loco to an activity.";
        public const OpCodeGroup GROUP = OpCodeGroup.DCC;
        public const string NAME = "Allocate loco to activity";
        public const byte NUMBER = 0x43; // 67
        public const int PRIORITY = 2;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public byte Session
        {
            get => ConvertToByte(1);
            set => ConvertFromByte(1, value);
        }
        public byte AllocationCode
        {
            get => ConvertToByte(2);
            set => ConvertFromByte(2, value);
        }

        #endregion

        #region Constructors

        public AllocateLocoToActivity(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AllocateLocoToActivity() : base(CbusMessage.Create(new byte[] {67})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} Session: {this.Session} AllocationCode: {this.AllocationCode}";

        #endregion
	}
	
    #endregion

    #region 0x44 STMOD Set CAB session mode

    /// <summary>
	/// STMOD
    /// Set CAB session mode
    /// Set the CAB session mode.
    /// </summary>
    [OpCode(
        Code = "STMOD", 
        Description = "Set the CAB session mode.",
        Group = "DCC", 
        Name = "Set CAB session mode", 
        Number = 68, 
        Priority = 2)]
    public partial class SetCabSessionMode : OpCodeData2, // 0x44
        IHasSession,
        IHasSpeedMode,
        IHasServiceMode,
        IHasSoundMode,
        ISetCabSessionMode
    {
        #region Fields

        public const string CODE = "STMOD";
        public const string DESCRIPTION = "Set the CAB session mode.";
        public const OpCodeGroup GROUP = OpCodeGroup.DCC;
        public const string NAME = "Set CAB session mode";
        public const byte NUMBER = 0x44; // 68
        public const int PRIORITY = 2;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public byte Session
        {
            get => ConvertToByte(1);
            set => ConvertFromByte(1, value);
        }
        public SpeedModeEnum SpeedMode
        {
            get => ConvertToEnum<SpeedModeEnum>(2, new int[] { 0,1 });
            set => ConvertFromEnum<SpeedModeEnum>(2, new int[] { 0,1 }, value);
        }
        public ServiceModeEnum ServiceMode
        {
            get => ConvertToEnum<ServiceModeEnum>(2, 2);
            set => ConvertFromEnum<ServiceModeEnum>(2, 2, value);
        }
        public bool SoundMode
        {
            get => ConvertToBool(2, 3);
            set => ConvertFromBool(2, 3, value);
        }

        #endregion

        #region Constructors

        public SetCabSessionMode(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public SetCabSessionMode() : base(CbusMessage.Create(new byte[] {68})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} Session: {this.Session} SpeedMode: {this.SpeedMode:F} ServiceMode: {this.ServiceMode:F} SoundMode: {(this.SoundMode ? "On" : "Off")}";

        #endregion
	}
	
    #endregion

    #region 0x45 PCON Consist Engine

    /// <summary>
	/// PCON
    /// Consist Engine
    /// Adds a decoder to a consist.
    /// </summary>
    [OpCode(
        Code = "PCON", 
        Description = "Adds a decoder to a consist.",
        Group = "DCC", 
        Name = "Consist Engine", 
        Number = 69, 
        Priority = 2)]
    public partial class ConsistEngine : OpCodeData2, // 0x45
        IHasConsist,
        IHasSession,
        IConsistEngine
    {
        #region Fields

        public const string CODE = "PCON";
        public const string DESCRIPTION = "Adds a decoder to a consist.";
        public const OpCodeGroup GROUP = OpCodeGroup.DCC;
        public const string NAME = "Consist Engine";
        public const byte NUMBER = 0x45; // 69
        public const int PRIORITY = 2;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public byte Consist
        {
            get => ConvertToByte(2);
            set => ConvertFromByte(2, value);
        }
        public byte Session
        {
            get => ConvertToByte(1);
            set => ConvertFromByte(1, value);
        }

        #endregion

        #region Constructors

        public ConsistEngine(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public ConsistEngine() : base(CbusMessage.Create(new byte[] {69})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} Session: {this.Session} Consist: {this.Consist}";

        #endregion
	}
	
    #endregion

    #region 0x46 KCON Remove Engine from consist

    /// <summary>
	/// KCON
    /// Remove Engine from consist
    /// Removes a loco from a consist.
    /// </summary>
    [OpCode(
        Code = "KCON", 
        Description = "Removes a loco from a consist.",
        Group = "DCC", 
        Name = "Remove Engine from consist", 
        Number = 70, 
        Priority = 2)]
    public partial class RemoveEngineFromConsist : OpCodeData2, // 0x46
        IHasConsist,
        IHasSession,
        IRemoveEngineFromConsist
    {
        #region Fields

        public const string CODE = "KCON";
        public const string DESCRIPTION = "Removes a loco from a consist.";
        public const OpCodeGroup GROUP = OpCodeGroup.DCC;
        public const string NAME = "Remove Engine from consist";
        public const byte NUMBER = 0x46; // 70
        public const int PRIORITY = 2;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public byte Consist
        {
            get => ConvertToByte(2);
            set => ConvertFromByte(2, value);
        }
        public byte Session
        {
            get => ConvertToByte(1);
            set => ConvertFromByte(1, value);
        }

        #endregion

        #region Constructors

        public RemoveEngineFromConsist(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public RemoveEngineFromConsist() : base(CbusMessage.Create(new byte[] {70})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} Session: {this.Session} Consist: {this.Consist}";

        #endregion
	}
	
    #endregion

    #region 0x47 DSPD Set Engine Speed and Direction

    /// <summary>
	/// DSPD
    /// Set Engine Speed and Direction
    /// Sent by a CAB or equivalent to request an engine speed/dir change.
    /// </summary>
    [OpCode(
        Code = "DSPD", 
        Description = "Sent by a CAB or equivalent to request an engine speed/dir change.",
        Group = "DCC", 
        Name = "Set Engine Speed and Direction", 
        Number = 71, 
        Priority = 2)]
    public partial class SetEngineSpeedAndDirection : OpCodeData2, // 0x47
        IHasSession,
        IHasSpeedDir,
        ISetEngineSpeedAndDirection
    {
        #region Fields

        public const string CODE = "DSPD";
        public const string DESCRIPTION = "Sent by a CAB or equivalent to request an engine speed/dir change.";
        public const OpCodeGroup GROUP = OpCodeGroup.DCC;
        public const string NAME = "Set Engine Speed and Direction";
        public const byte NUMBER = 0x47; // 71
        public const int PRIORITY = 2;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public byte Session
        {
            get => ConvertToByte(1);
            set => ConvertFromByte(1, value);
        }
        public byte SpeedDir
        {
            get => ConvertToByte(2);
            set => ConvertFromByte(2, value);
        }

        #endregion

        #region Constructors

        public SetEngineSpeedAndDirection(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public SetEngineSpeedAndDirection() : base(CbusMessage.Create(new byte[] {71})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} Session: {this.Session} SpeedDir: {this.SpeedDir}";

        #endregion
	}
	
    #endregion

    #region 0x48 DFLG Set Engine Flags

    /// <summary>
	/// DFLG
    /// Set Engine Flags
    /// Sent by a cab to notify the command station of a change in engine flags.
    /// </summary>
    [OpCode(
        Code = "DFLG", 
        Description = "Sent by a cab to notify the command station of a change in engine flags.",
        Group = "DCC", 
        Name = "Set Engine Flags", 
        Number = 72, 
        Priority = 2)]
    public partial class SetEngineFlags : OpCodeData2, // 0x48
        IHasSession,
        IHasSpeedMode,
        IHasLights,
        IHasDirection,
        IHasEngineState,
        ISetEngineFlags
    {
        #region Fields

        public const string CODE = "DFLG";
        public const string DESCRIPTION = "Sent by a cab to notify the command station of a change in engine flags.";
        public const OpCodeGroup GROUP = OpCodeGroup.DCC;
        public const string NAME = "Set Engine Flags";
        public const byte NUMBER = 0x48; // 72
        public const int PRIORITY = 2;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public byte Session
        {
            get => ConvertToByte(1);
            set => ConvertFromByte(1, value);
        }
        public SpeedModeEnum SpeedMode
        {
            get => ConvertToEnum<SpeedModeEnum>(2, new int[] { 0,1 });
            set => ConvertFromEnum<SpeedModeEnum>(2, new int[] { 0,1 }, value);
        }
        public bool Lights
        {
            get => ConvertToBool(2, 2);
            set => ConvertFromBool(2, 2, value);
        }
        public bool Direction
        {
            get => ConvertToBool(2, 3);
            set => ConvertFromBool(2, 3, value);
        }
        public EngineStateEnum EngineState
        {
            get => ConvertToEnum<EngineStateEnum>(2, new int[] { 4,5 });
            set => ConvertFromEnum<EngineStateEnum>(2, new int[] { 4,5 }, value);
        }

        #endregion

        #region Constructors

        public SetEngineFlags(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public SetEngineFlags() : base(CbusMessage.Create(new byte[] {72})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} Session: {this.Session} SpeedMode: {this.SpeedMode:F} Lights: {(this.Lights ? "On" : "Off")} Direction: {(this.Direction ? "F" : "R")} EngineState: {this.EngineState:F}";

        #endregion
	}
	
    #endregion

    #region 0x49 DFNON Set Engine function On

    /// <summary>
	/// DFNON
    /// Set Engine function On
    /// Sent by a cab to turn on a specific loco function. This provides an alternative method to DFUN for controlling loco functions. A command station must implement both methods.
    /// </summary>
    [OpCode(
        Code = "DFNON", 
        Description = "Sent by a cab to turn on a specific loco function. This provides an alternative method to DFUN for controlling loco functions. A command station must implement both methods.",
        Group = "DCC", 
        Name = "Set Engine function On", 
        Number = 73, 
        Priority = 2)]
    public partial class SetEngineFunctionOn : OpCodeData2, // 0x49
        IHasSession,
        IHasFunctionNumber,
        ISetEngineFunctionOn
    {
        #region Fields

        public const string CODE = "DFNON";
        public const string DESCRIPTION = "Sent by a cab to turn on a specific loco function. This provides an alternative method to DFUN for controlling loco functions. A command station must implement both methods.";
        public const OpCodeGroup GROUP = OpCodeGroup.DCC;
        public const string NAME = "Set Engine function On";
        public const byte NUMBER = 0x49; // 73
        public const int PRIORITY = 2;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public byte Session
        {
            get => ConvertToByte(1);
            set => ConvertFromByte(1, value);
        }
        public byte FunctionNumber
        {
            get => ConvertToByte(2);
            set => ConvertFromByte(2, value);
        }

        #endregion

        #region Constructors

        public SetEngineFunctionOn(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public SetEngineFunctionOn() : base(CbusMessage.Create(new byte[] {73})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} Session: {this.Session} FunctionNumber: {this.FunctionNumber}";

        #endregion
	}
	
    #endregion

    #region 0x4A DFNOF Set Engine function Off

    /// <summary>
	/// DFNOF
    /// Set Engine function Off
    /// Sent by a cab to turn off a specific loco function. This provides an alternative method to DFUN for controlling loco functions. A command station must implement both methods.
    /// </summary>
    [OpCode(
        Code = "DFNOF", 
        Description = "Sent by a cab to turn off a specific loco function. This provides an alternative method to DFUN for controlling loco functions. A command station must implement both methods.",
        Group = "DCC", 
        Name = "Set Engine function Off", 
        Number = 74, 
        Priority = 2)]
    public partial class SetEngineFunctionOff : OpCodeData2, // 0x4A
        IHasSession,
        IHasFunctionNumber,
        ISetEngineFunctionOff
    {
        #region Fields

        public const string CODE = "DFNOF";
        public const string DESCRIPTION = "Sent by a cab to turn off a specific loco function. This provides an alternative method to DFUN for controlling loco functions. A command station must implement both methods.";
        public const OpCodeGroup GROUP = OpCodeGroup.DCC;
        public const string NAME = "Set Engine function Off";
        public const byte NUMBER = 0x4A; // 74
        public const int PRIORITY = 2;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public byte Session
        {
            get => ConvertToByte(1);
            set => ConvertFromByte(1, value);
        }
        public byte FunctionNumber
        {
            get => ConvertToByte(2);
            set => ConvertFromByte(2, value);
        }

        #endregion

        #region Constructors

        public SetEngineFunctionOff(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public SetEngineFunctionOff() : base(CbusMessage.Create(new byte[] {74})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} Session: {this.Session} FunctionNumber: {this.FunctionNumber}";

        #endregion
	}
	
    #endregion

    #region 0x4C SSTAT Service mode status

    /// <summary>
	/// SSTAT
    /// Service mode status
    /// Status returned by command station/programmer at end of programming operation that does not return data.
    /// </summary>
    [OpCode(
        Code = "SSTAT", 
        Description = "Status returned by command station/programmer at end of programming operation that does not return data.",
        Group = "DCC", 
        Name = "Service mode status", 
        Number = 76, 
        Priority = 3)]
    public partial class ServiceModeStatus : OpCodeData2, // 0x4C
        IHasSession,
        IHasSessionStatus,
        IServiceModeStatus
    {
        #region Fields

        public const string CODE = "SSTAT";
        public const string DESCRIPTION = "Status returned by command station/programmer at end of programming operation that does not return data.";
        public const OpCodeGroup GROUP = OpCodeGroup.DCC;
        public const string NAME = "Service mode status";
        public const byte NUMBER = 0x4C; // 76
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public byte Session
        {
            get => ConvertToByte(1);
            set => ConvertFromByte(1, value);
        }
        public SessionStatusEnum SessionStatus
        {
            get => ConvertToEnum<SessionStatusEnum>(2);
            set => ConvertFromEnum<SessionStatusEnum>(2, value);
        }

        #endregion

        #region Constructors

        public ServiceModeStatus(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public ServiceModeStatus() : base(CbusMessage.Create(new byte[] {76})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} Session: {this.Session} SessionStatus: {this.SessionStatus:F}";

        #endregion
	}
	
    #endregion

    #region 0x50 RQNN Request node number

    /// <summary>
	/// RQNN
    /// Request node number
    /// Sent by a node that is in setup/configuration mode and requests assignment of a node number (NN). The node allocating node numbers responds with (SNN) which contains the newly assigned node number. <NN hi> and <NN lo> are the existing node number
    /// </summary>
    [OpCode(
        Code = "RQNN", 
        Description = "Sent by a node that is in setup/configuration mode and requests assignment of a node number (NN). The node allocating node numbers responds with (SNN) which contains the newly assigned node number. <NN hi> and <NN lo> are the existing node number",
        Group = "Config", 
        Name = "Request node number", 
        Number = 80, 
        Priority = 3)]
    public partial class RequestNodeNumber : OpCodeData2, // 0x50
        IHasNodeNumber,
        IRequestNodeNumber
    {
        #region Fields

        public const string CODE = "RQNN";
        public const string DESCRIPTION = "Sent by a node that is in setup/configuration mode and requests assignment of a node number (NN). The node allocating node numbers responds with (SNN) which contains the newly assigned node number. <NN hi> and <NN lo> are the existing node number";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Request node number";
        public const byte NUMBER = 0x50; // 80
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }

        #endregion

        #region Constructors

        public RequestNodeNumber(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public RequestNodeNumber() : base(CbusMessage.Create(new byte[] {80})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber}";

        #endregion
	}
	
    #endregion

    #region 0x51 NNREL Node number release

    /// <summary>
	/// NNREL
    /// Node number release
    /// Sent by node when taken out of service. e.g. when reverting to SLiM mode.
    /// </summary>
    [OpCode(
        Code = "NNREL", 
        Description = "Sent by node when taken out of service. e.g. when reverting to SLiM mode.",
        Group = "Config", 
        Name = "Node number release", 
        Number = 81, 
        Priority = 3)]
    public partial class NodeNumberRelease : OpCodeData2, // 0x51
        IHasNodeNumber,
        INodeNumberRelease
    {
        #region Fields

        public const string CODE = "NNREL";
        public const string DESCRIPTION = "Sent by node when taken out of service. e.g. when reverting to SLiM mode.";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Node number release";
        public const byte NUMBER = 0x51; // 81
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }

        #endregion

        #region Constructors

        public NodeNumberRelease(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public NodeNumberRelease() : base(CbusMessage.Create(new byte[] {81})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber}";

        #endregion
	}
	
    #endregion

    #region 0x52 NNACK Node number acknowledge

    /// <summary>
	/// NNACK
    /// Node number acknowledge
    /// Sent by a node to verify its presence and confirm its node id. This message is sent to acknowledge an SNN.
    /// </summary>
    [OpCode(
        Code = "NNACK", 
        Description = "Sent by a node to verify its presence and confirm its node id. This message is sent to acknowledge an SNN.",
        Group = "Config", 
        Name = "Node number acknowledge", 
        Number = 82, 
        Priority = 3)]
    public partial class NodeNumberAcknowledge : OpCodeData2, // 0x52
        IReplyTo<SetNodeNumber>,
        IHasNodeNumber,
        INodeNumberAcknowledge
    {
        #region Fields

        public const string CODE = "NNACK";
        public const string DESCRIPTION = "Sent by a node to verify its presence and confirm its node id. This message is sent to acknowledge an SNN.";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Node number acknowledge";
        public const byte NUMBER = 0x52; // 82
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }

        #endregion

        #region Constructors

        public NodeNumberAcknowledge(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public NodeNumberAcknowledge() : base(CbusMessage.Create(new byte[] {82})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber}";

        #endregion
	}
	
    #endregion

    #region 0x53 NNLRN Set node into learn mode

    /// <summary>
	/// NNLRN
    /// Set node into learn mode
    /// Sent by a configuration tool to put a specific node into learn mode.
    /// </summary>
    [OpCode(
        Code = "NNLRN", 
        Description = "Sent by a configuration tool to put a specific node into learn mode.",
        Group = "Config", 
        Name = "Set node into learn mode", 
        Number = 83, 
        Priority = 3)]
    public partial class SetNodeIntoLearnMode : OpCodeData2, // 0x53
        IHasNodeNumber,
        ISetNodeIntoLearnMode
    {
        #region Fields

        public const string CODE = "NNLRN";
        public const string DESCRIPTION = "Sent by a configuration tool to put a specific node into learn mode.";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Set node into learn mode";
        public const byte NUMBER = 0x53; // 83
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }

        #endregion

        #region Constructors

        public SetNodeIntoLearnMode(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public SetNodeIntoLearnMode() : base(CbusMessage.Create(new byte[] {83})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber}";

        #endregion
	}
	
    #endregion

    #region 0x54 NNULN Release node from learn mode

    /// <summary>
	/// NNULN
    /// Release node from learn mode
    /// Sent by a configuration tool to take node out of learn mode and revert to normal operation.
    /// </summary>
    [OpCode(
        Code = "NNULN", 
        Description = "Sent by a configuration tool to take node out of learn mode and revert to normal operation.",
        Group = "Config", 
        Name = "Release node from learn mode", 
        Number = 84, 
        Priority = 3)]
    public partial class ReleaseNodeFromLearnMode : OpCodeData2, // 0x54
        IHasNodeNumber,
        IReleaseNodeFromLearnMode
    {
        #region Fields

        public const string CODE = "NNULN";
        public const string DESCRIPTION = "Sent by a configuration tool to take node out of learn mode and revert to normal operation.";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Release node from learn mode";
        public const byte NUMBER = 0x54; // 84
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }

        #endregion

        #region Constructors

        public ReleaseNodeFromLearnMode(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public ReleaseNodeFromLearnMode() : base(CbusMessage.Create(new byte[] {84})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber}";

        #endregion
	}
	
    #endregion

    #region 0x55 NNCLR Clear all events from a node

    /// <summary>
	/// NNCLR
    /// Clear all events from a node
    /// Sent by a configuration tool to clear all events from a specific node. Must be in learn mode first to safeguard against accidental erasure of all events.
    /// </summary>
    [OpCode(
        Code = "NNCLR", 
        Description = "Sent by a configuration tool to clear all events from a specific node. Must be in learn mode first to safeguard against accidental erasure of all events.",
        Group = "Config", 
        Name = "Clear all events from a node", 
        Number = 85, 
        Priority = 3)]
    public partial class ClearAllEventsFromANode : OpCodeData2, // 0x55
        IHasNodeNumber,
        IClearAllEventsFromANode
    {
        #region Fields

        public const string CODE = "NNCLR";
        public const string DESCRIPTION = "Sent by a configuration tool to clear all events from a specific node. Must be in learn mode first to safeguard against accidental erasure of all events.";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Clear all events from a node";
        public const byte NUMBER = 0x55; // 85
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }

        #endregion

        #region Constructors

        public ClearAllEventsFromANode(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public ClearAllEventsFromANode() : base(CbusMessage.Create(new byte[] {85})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber}";

        #endregion
	}
	
    #endregion

    #region 0x56 NNEVN Read number of events available in a node

    /// <summary>
	/// NNEVN
    /// Read number of events available in a node
    /// Sent by a configuration tool to read the number of available event slots in a node. Response is EVLNF (0x70).
    /// </summary>
    [OpCode(
        Code = "NNEVN", 
        Description = "Sent by a configuration tool to read the number of available event slots in a node. Response is EVLNF (0x70).",
        Group = "Config", 
        Name = "Read number of events available in a node", 
        Number = 86, 
        Priority = 3)]
    public partial class ReadNumberOfEventsAvailableInANode : OpCodeData2, // 0x56
        IHasNodeNumber,
        IReadNumberOfEventsAvailableInANode
    {
        #region Fields

        public const string CODE = "NNEVN";
        public const string DESCRIPTION = "Sent by a configuration tool to read the number of available event slots in a node. Response is EVLNF (0x70).";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Read number of events available in a node";
        public const byte NUMBER = 0x56; // 86
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }

        #endregion

        #region Constructors

        public ReadNumberOfEventsAvailableInANode(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public ReadNumberOfEventsAvailableInANode() : base(CbusMessage.Create(new byte[] {86})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber}";

        #endregion
	}
	
    #endregion

    #region 0x57 NERD Read back all stored events in a node

    /// <summary>
	/// NERD
    /// Read back all stored events in a node
    /// Sent by a configuration tool to read all the stored events in a node. Response is ENRSP (0xF2).
    /// </summary>
    [OpCode(
        Code = "NERD", 
        Description = "Sent by a configuration tool to read all the stored events in a node. Response is ENRSP (0xF2).",
        Group = "Config", 
        Name = "Read back all stored events in a node", 
        Number = 87, 
        Priority = 3)]
    public partial class ReadBackAllStoredEventsInANode : OpCodeData2, // 0x57
        IHasNodeNumber,
        IReadBackAllStoredEventsInANode
    {
        #region Fields

        public const string CODE = "NERD";
        public const string DESCRIPTION = "Sent by a configuration tool to read all the stored events in a node. Response is ENRSP (0xF2).";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Read back all stored events in a node";
        public const byte NUMBER = 0x57; // 87
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }

        #endregion

        #region Constructors

        public ReadBackAllStoredEventsInANode(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public ReadBackAllStoredEventsInANode() : base(CbusMessage.Create(new byte[] {87})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber}";

        #endregion
	}
	
    #endregion

    #region 0x58 RQEVN Request to read number of stored events

    /// <summary>
	/// RQEVN
    /// Request to read number of stored events
    /// Sent by a configuration tool to read the number of stored events in a node. Response is NUMEV (0x74).
    /// </summary>
    [OpCode(
        Code = "RQEVN", 
        Description = "Sent by a configuration tool to read the number of stored events in a node. Response is NUMEV (0x74).",
        Group = "Config", 
        Name = "Request to read number of stored events", 
        Number = 88, 
        Priority = 3)]
    public partial class RequestToReadNumberOfStoredEvents : OpCodeData2, // 0x58
        IHasNodeNumber,
        IRequestToReadNumberOfStoredEvents
    {
        #region Fields

        public const string CODE = "RQEVN";
        public const string DESCRIPTION = "Sent by a configuration tool to read the number of stored events in a node. Response is NUMEV (0x74).";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Request to read number of stored events";
        public const byte NUMBER = 0x58; // 88
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }

        #endregion

        #region Constructors

        public RequestToReadNumberOfStoredEvents(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public RequestToReadNumberOfStoredEvents() : base(CbusMessage.Create(new byte[] {88})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber}";

        #endregion
	}
	
    #endregion

    #region 0x59 WRACK Write acknowledge

    /// <summary>
	/// WRACK
    /// Write acknowledge
    /// Sent by a node to indicate the completion of a write to memory operation. All nodes must issue WRACK when a write operation to node variables
    /// </summary>
    [OpCode(
        Code = "WRACK", 
        Description = "Sent by a node to indicate the completion of a write to memory operation. All nodes must issue WRACK when a write operation to node variables",
        Group = "Config", 
        Name = "Write acknowledge", 
        Number = 89, 
        Priority = 3)]
    public partial class WriteAcknowledge : OpCodeData2, // 0x59
        IHasNodeNumber,
        IWriteAcknowledge
    {
        #region Fields

        public const string CODE = "WRACK";
        public const string DESCRIPTION = "Sent by a node to indicate the completion of a write to memory operation. All nodes must issue WRACK when a write operation to node variables";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Write acknowledge";
        public const byte NUMBER = 0x59; // 89
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }

        #endregion

        #region Constructors

        public WriteAcknowledge(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public WriteAcknowledge() : base(CbusMessage.Create(new byte[] {89})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber}";

        #endregion
	}
	
    #endregion

    #region 0x5A RQDAT Request node data event

    /// <summary>
	/// RQDAT
    /// Request node data event
    /// Sent by one node to read the data event from another node.(eg: RFID data). Response is ARDAT (0xF7).
    /// </summary>
    [OpCode(
        Code = "RQDAT", 
        Description = "Sent by one node to read the data event from another node.(eg: RFID data). Response is ARDAT (0xF7).",
        Group = "Accessory", 
        Name = "Request node data event", 
        Number = 90, 
        Priority = 3)]
    public partial class RequestNodeDataEvent : OpCodeData2, // 0x5A
        IHasNodeNumber,
        IRequestNodeDataEvent
    {
        #region Fields

        public const string CODE = "RQDAT";
        public const string DESCRIPTION = "Sent by one node to read the data event from another node.(eg: RFID data). Response is ARDAT (0xF7).";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Request node data event";
        public const byte NUMBER = 0x5A; // 90
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }

        #endregion

        #region Constructors

        public RequestNodeDataEvent(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public RequestNodeDataEvent() : base(CbusMessage.Create(new byte[] {90})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber}";

        #endregion
	}
	
    #endregion

    #region 0x5B RQDDS Request device data - short mode

    /// <summary>
	/// RQDDS
    /// Request device data - short mode
    /// To request a ‘data set’ from a device using the short event method. where DN is the device number. Response is DDRS (0xFB).
    /// </summary>
    [OpCode(
        Code = "RQDDS", 
        Description = "To request a ‘data set’ from a device using the short event method. where DN is the device number. Response is DDRS (0xFB).",
        Group = "Accessory", 
        Name = "Request device data - short mode", 
        Number = 91, 
        Priority = 3)]
    public partial class RequestDeviceDataShortMode : OpCodeData2, // 0x5B
        IHasDeviceNumber,
        IRequestDeviceDataShortMode
    {
        #region Fields

        public const string CODE = "RQDDS";
        public const string DESCRIPTION = "To request a ‘data set’ from a device using the short event method. where DN is the device number. Response is DDRS (0xFB).";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Request device data - short mode";
        public const byte NUMBER = 0x5B; // 91
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort DeviceNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }

        #endregion

        #region Constructors

        public RequestDeviceDataShortMode(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public RequestDeviceDataShortMode() : base(CbusMessage.Create(new byte[] {91})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} DeviceNumber: {this.DeviceNumber}";

        #endregion
	}
	
    #endregion

    #region 0x5C BOOTM Put node into bootload mode

    /// <summary>
	/// BOOTM
    /// Put node into bootload mode
    /// For SliM nodes with no NN then the NN of the command is must be zero. For SLiM nodes with an NN
    /// </summary>
    [OpCode(
        Code = "BOOTM", 
        Description = "For SliM nodes with no NN then the NN of the command is must be zero. For SLiM nodes with an NN",
        Group = "Config", 
        Name = "Put node into bootload mode", 
        Number = 92, 
        Priority = 3)]
    public partial class PutNodeIntoBootloadMode : OpCodeData2, // 0x5C
        IHasNodeNumber,
        IPutNodeIntoBootloadMode
    {
        #region Fields

        public const string CODE = "BOOTM";
        public const string DESCRIPTION = "For SliM nodes with no NN then the NN of the command is must be zero. For SLiM nodes with an NN";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Put node into bootload mode";
        public const byte NUMBER = 0x5C; // 92
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }

        #endregion

        #region Constructors

        public PutNodeIntoBootloadMode(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public PutNodeIntoBootloadMode() : base(CbusMessage.Create(new byte[] {92})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber}";

        #endregion
	}
	
    #endregion

    #region 0x5D ENUM Force a self enumeration cycle for use with CAN

    /// <summary>
	/// ENUM
    /// Force a self enumeration cycle for use with CAN
    /// For nodes in FLiM using CAN as transport. This OPC will force a self-enumeration cycle for the specified node. A new CAN_ID will be allocated if needed. Following the ENUM sequence
    /// </summary>
    [OpCode(
        Code = "ENUM", 
        Description = "For nodes in FLiM using CAN as transport. This OPC will force a self-enumeration cycle for the specified node. A new CAN_ID will be allocated if needed. Following the ENUM sequence",
        Group = "Config", 
        Name = "Force a self enumeration cycle for use with CAN", 
        Number = 93, 
        Priority = 3)]
    public partial class ForceASelfEnumerationCycleForUseWithCan : OpCodeData2, // 0x5D
        IHasNodeNumber,
        IForceASelfEnumerationCycleForUseWithCan
    {
        #region Fields

        public const string CODE = "ENUM";
        public const string DESCRIPTION = "For nodes in FLiM using CAN as transport. This OPC will force a self-enumeration cycle for the specified node. A new CAN_ID will be allocated if needed. Following the ENUM sequence";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Force a self enumeration cycle for use with CAN";
        public const byte NUMBER = 0x5D; // 93
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }

        #endregion

        #region Constructors

        public ForceASelfEnumerationCycleForUseWithCan(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public ForceASelfEnumerationCycleForUseWithCan() : base(CbusMessage.Create(new byte[] {93})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber}";

        #endregion
	}
	
    #endregion

    #region 0x5F EXTC1 Extended opcode with 1 data byte

    /// <summary>
	/// EXTC1
    /// Extended opcode with 1 data byte
    /// Used if the basic set of 32 OPCs is not enough. Allows an additional 256 OPCs.
    /// </summary>
    [OpCode(
        Code = "EXTC1", 
        Description = "Used if the basic set of 32 OPCs is not enough. Allows an additional 256 OPCs.",
        Group = "General", 
        Name = "Extended opcode with 1 data byte", 
        Number = 95, 
        Priority = 3)]
    public partial class ExtendedOpcodeWith1DataByte : OpCodeData2, // 0x5F
        IHasExtendedOpCode,
        IHasData1,
        IExtendedOpcodeWith1DataByte
    {
        #region Fields

        public const string CODE = "EXTC1";
        public const string DESCRIPTION = "Used if the basic set of 32 OPCs is not enough. Allows an additional 256 OPCs.";
        public const OpCodeGroup GROUP = OpCodeGroup.General;
        public const string NAME = "Extended opcode with 1 data byte";
        public const byte NUMBER = 0x5F; // 95
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public byte ExtendedOpCode
        {
            get => ConvertToByte(1);
            set => ConvertFromByte(1, value);
        }
        public byte Data1
        {
            get => ConvertToByte(2);
            set => ConvertFromByte(2, value);
        }

        #endregion

        #region Constructors

        public ExtendedOpcodeWith1DataByte(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public ExtendedOpcodeWith1DataByte() : base(CbusMessage.Create(new byte[] {95})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} ExtendedOpCode: {this.ExtendedOpCode:X2} Data1: {this.Data1:X2}";

        #endregion
	}
	
    #endregion

    #region 0x60 DFUN Set Engine functions

    /// <summary>
	/// DFUN
    /// Set Engine functions
    /// Sent by a CAB or equivalent to request an engine Fn state change.
    /// </summary>
    [OpCode(
        Code = "DFUN", 
        Description = "Sent by a CAB or equivalent to request an engine Fn state change.",
        Group = "DCC", 
        Name = "Set Engine functions", 
        Number = 96, 
        Priority = 2)]
    public partial class SetEngineFunctions : OpCodeData3, // 0x60
        IHasSession,
        IHasFunctionRange,
        IHasValue,
        ISetEngineFunctions
    {
        #region Fields

        public const string CODE = "DFUN";
        public const string DESCRIPTION = "Sent by a CAB or equivalent to request an engine Fn state change.";
        public const OpCodeGroup GROUP = OpCodeGroup.DCC;
        public const string NAME = "Set Engine functions";
        public const byte NUMBER = 0x60; // 96
        public const int PRIORITY = 2;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public byte Session
        {
            get => ConvertToByte(1);
            set => ConvertFromByte(1, value);
        }
        public FunctionRangeEnum FunctionRange
        {
            get => ConvertToEnum<FunctionRangeEnum>(2);
            set => ConvertFromEnum<FunctionRangeEnum>(2, value);
        }
        public byte Value
        {
            get => ConvertToByte(3);
            set => ConvertFromByte(3, value);
        }

        #endregion

        #region Constructors

        public SetEngineFunctions(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public SetEngineFunctions() : base(CbusMessage.Create(new byte[] {96})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} Session: {this.Session} FunctionRange: {this.FunctionRange:F} Value: {this.Value:X2}";

        #endregion
	}
	
    #endregion

    #region 0x61 GLOC Get engine session

    /// <summary>
	/// GLOC
    /// Get engine session
    /// Otherwise responds with (ERR): engine in use. (ERR:) stack full or (ERR) no session. The latter indicates that there is no current session to steal/share depending on the flag bits set in the request./r/nGLOC with all flag bits set to zero is exactly equivalent to RLOC
    /// </summary>
    [OpCode(
        Code = "GLOC", 
        Description = "Otherwise responds with (ERR): engine in use. (ERR:) stack full or (ERR) no session. The latter indicates that there is no current session to steal/share depending on the flag bits set in the request./r/nGLOC with all flag bits set to zero is exactly equivalent to RLOC",
        Group = "DCC", 
        Name = "Get engine session", 
        Number = 97, 
        Priority = 2)]
    public partial class GetEngineSession : OpCodeData3, // 0x61
        IHasAddress,
        IHasSessionFlags,
        IGetEngineSession
    {
        #region Fields

        public const string CODE = "GLOC";
        public const string DESCRIPTION = "Otherwise responds with (ERR): engine in use. (ERR:) stack full or (ERR) no session. The latter indicates that there is no current session to steal/share depending on the flag bits set in the request./r/nGLOC with all flag bits set to zero is exactly equivalent to RLOC";
        public const OpCodeGroup GROUP = OpCodeGroup.DCC;
        public const string NAME = "Get engine session";
        public const byte NUMBER = 0x61; // 97
        public const int PRIORITY = 2;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort Address
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public SessionFlagsEnum SessionFlags
        {
            get => ConvertToEnum<SessionFlagsEnum>(3);
            set => ConvertFromEnum<SessionFlagsEnum>(3, value);
        }

        #endregion

        #region Constructors

        public GetEngineSession(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public GetEngineSession() : base(CbusMessage.Create(new byte[] {97})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} Address: {this.Address} SessionFlags: {this.SessionFlags:F}";

        #endregion
	}
	
    #endregion

    #region 0x63 ERR Command Station Error report

    /// <summary>
	/// ERR
    /// Command Station Error report
    /// Sent in response to an error situation by a command station.
    /// </summary>
    [OpCode(
        Code = "ERR", 
        Description = "Sent in response to an error situation by a command station.",
        Group = "DCC", 
        Name = "Command Station Error report", 
        Number = 99, 
        Priority = 2)]
    public partial class CommandStationErrorReport : OpCodeData3, // 0x63
        IReplyTo<QueryEngine>,
        IReplyTo<RequestEngineSession>,
        IReplyTo<QueryConsist>,
        IHasData1,
        IHasData2,
        IHasDccErrorCode,
        ICommandStationErrorReport
    {
        #region Fields

        public const string CODE = "ERR";
        public const string DESCRIPTION = "Sent in response to an error situation by a command station.";
        public const OpCodeGroup GROUP = OpCodeGroup.DCC;
        public const string NAME = "Command Station Error report";
        public const byte NUMBER = 0x63; // 99
        public const int PRIORITY = 2;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public byte Data1
        {
            get => ConvertToByte(1);
            set => ConvertFromByte(1, value);
        }
        public byte Data2
        {
            get => ConvertToByte(2);
            set => ConvertFromByte(2, value);
        }
        public DccErrorCodeEnum DccErrorCode
        {
            get => ConvertToEnum<DccErrorCodeEnum>(3);
            set => ConvertFromEnum<DccErrorCodeEnum>(3, value);
        }

        #endregion

        #region Constructors

        public CommandStationErrorReport(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public CommandStationErrorReport() : base(CbusMessage.Create(new byte[] {99})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} Data1: {this.Data1:X2} Data2: {this.Data2:X2} DccErrorCode: {this.DccErrorCode:F}";

        #endregion
	}
	
    #endregion

    #region 0x6F CMDERR Error messages from nodes during configuration

    /// <summary>
	/// CMDERR
    /// Error messages from nodes during configuration
    /// Sent by node if there is an error when a configuration command is sent.
    /// </summary>
    [OpCode(
        Code = "CMDERR", 
        Description = "Sent by node if there is an error when a configuration command is sent.",
        Group = "Config", 
        Name = "Error messages from nodes during configuration", 
        Number = 111, 
        Priority = 3)]
    public partial class ErrorMessagesFromNodesDuringConfiguration : OpCodeData3, // 0x6F
        IHasNodeNumber,
        IHasAccErrorCode,
        IErrorMessagesFromNodesDuringConfiguration
    {
        #region Fields

        public const string CODE = "CMDERR";
        public const string DESCRIPTION = "Sent by node if there is an error when a configuration command is sent.";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Error messages from nodes during configuration";
        public const byte NUMBER = 0x6F; // 111
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public AccErrorCodeEnum AccErrorCode
        {
            get => ConvertToEnum<AccErrorCodeEnum>(3);
            set => ConvertFromEnum<AccErrorCodeEnum>(3, value);
        }

        #endregion

        #region Constructors

        public ErrorMessagesFromNodesDuringConfiguration(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public ErrorMessagesFromNodesDuringConfiguration() : base(CbusMessage.Create(new byte[] {111})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} AccErrorCode: {this.AccErrorCode:F}";

        #endregion
	}
	
    #endregion

    #region 0x70 EVNLF Event space left reply from node

    /// <summary>
	/// EVNLF
    /// Event space left reply from node
    /// The number of available events left in that node.
    /// </summary>
    [OpCode(
        Code = "EVNLF", 
        Description = "The number of available events left in that node.",
        Group = "Config", 
        Name = "Event space left reply from node", 
        Number = 112, 
        Priority = 3)]
    public partial class EventSpaceLeftReplyFromNode : OpCodeData3, // 0x70
        IReplyTo<ReadNumberOfEventsAvailableInANode>,
        IHasNodeNumber,
        IHasValue,
        IEventSpaceLeftReplyFromNode
    {
        #region Fields

        public const string CODE = "EVNLF";
        public const string DESCRIPTION = "The number of available events left in that node.";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Event space left reply from node";
        public const byte NUMBER = 0x70; // 112
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public byte Value
        {
            get => ConvertToByte(3);
            set => ConvertFromByte(3, value);
        }

        #endregion

        #region Constructors

        public EventSpaceLeftReplyFromNode(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public EventSpaceLeftReplyFromNode() : base(CbusMessage.Create(new byte[] {112})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} Value: {this.Value:X2}";

        #endregion
	}
	
    #endregion

    #region 0x71 NVRD Request read of a node variable

    /// <summary>
	/// NVRD
    /// Request read of a node variable
    /// Response is NVANS (0x97).
    /// </summary>
    [OpCode(
        Code = "NVRD", 
        Description = "Response is NVANS (0x97).",
        Group = "Config", 
        Name = "Request read of a node variable", 
        Number = 113, 
        Priority = 3)]
    public partial class RequestReadOfANodeVariable : OpCodeData3, // 0x71
        IHasNodeNumber,
        IHasNVIndex,
        IRequestReadOfANodeVariable
    {
        #region Fields

        public const string CODE = "NVRD";
        public const string DESCRIPTION = "Response is NVANS (0x97).";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Request read of a node variable";
        public const byte NUMBER = 0x71; // 113
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public byte NVIndex
        {
            get => ConvertToByte(3);
            set => ConvertFromByte(3, value);
        }

        #endregion

        #region Constructors

        public RequestReadOfANodeVariable(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public RequestReadOfANodeVariable() : base(CbusMessage.Create(new byte[] {113})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} NVIndex: {this.NVIndex}";

        #endregion
	}
	
    #endregion

    #region 0x72 NENRD Request read of stored events by event index

    /// <summary>
	/// NENRD
    /// Request read of stored events by event index
    /// Response is ENRSP (0xF2).
    /// </summary>
    [OpCode(
        Code = "NENRD", 
        Description = "Response is ENRSP (0xF2).",
        Group = "Config", 
        Name = "Request read of stored events by event index", 
        Number = 114, 
        Priority = 3)]
    public partial class RequestReadOfStoredEventsByEventIndex : OpCodeData3, // 0x72
        IHasNodeNumber,
        IHasENIndex,
        IRequestReadOfStoredEventsByEventIndex
    {
        #region Fields

        public const string CODE = "NENRD";
        public const string DESCRIPTION = "Response is ENRSP (0xF2).";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Request read of stored events by event index";
        public const byte NUMBER = 0x72; // 114
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public byte ENIndex
        {
            get => ConvertToByte(3);
            set => ConvertFromByte(3, value);
        }

        #endregion

        #region Constructors

        public RequestReadOfStoredEventsByEventIndex(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public RequestReadOfStoredEventsByEventIndex() : base(CbusMessage.Create(new byte[] {114})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} ENIndex: {this.ENIndex}";

        #endregion
	}
	
    #endregion

    #region 0x73 RQNPN Request read of a node parameter by index

    /// <summary>
	/// RQNPN
    /// Request read of a node parameter by index
    /// Response is PARAN (0x9B).
    /// </summary>
    [OpCode(
        Code = "RQNPN", 
        Description = "Response is PARAN (0x9B).",
        Group = "Config", 
        Name = "Request read of a node parameter by index", 
        Number = 115, 
        Priority = 3)]
    public partial class RequestReadOfANodeParameterByIndex : OpCodeData3, // 0x73
        IHasNodeNumber,
        IHasParamIndex,
        IRequestReadOfANodeParameterByIndex
    {
        #region Fields

        public const string CODE = "RQNPN";
        public const string DESCRIPTION = "Response is PARAN (0x9B).";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Request read of a node parameter by index";
        public const byte NUMBER = 0x73; // 115
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public byte ParamIndex
        {
            get => ConvertToByte(3);
            set => ConvertFromByte(3, value);
        }

        #endregion

        #region Constructors

        public RequestReadOfANodeParameterByIndex(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public RequestReadOfANodeParameterByIndex() : base(CbusMessage.Create(new byte[] {115})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} ParamIndex: {this.ParamIndex}";

        #endregion
	}
	
    #endregion

    #region 0x74 NUMEV Number of events stored in node

    /// <summary>
	/// NUMEV
    /// Number of events stored in node
    /// Response to request RQEVN (0x58).
    /// </summary>
    [OpCode(
        Code = "NUMEV", 
        Description = "Response to request RQEVN (0x58).",
        Group = "Config", 
        Name = "Number of events stored in node", 
        Number = 116, 
        Priority = 3)]
    public partial class NumberOfEventsStoredInNode : OpCodeData3, // 0x74
        IReplyTo<RequestToReadNumberOfStoredEvents>,
        IHasNodeNumber,
        IHasValue,
        INumberOfEventsStoredInNode
    {
        #region Fields

        public const string CODE = "NUMEV";
        public const string DESCRIPTION = "Response to request RQEVN (0x58).";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Number of events stored in node";
        public const byte NUMBER = 0x74; // 116
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public byte Value
        {
            get => ConvertToByte(3);
            set => ConvertFromByte(3, value);
        }

        #endregion

        #region Constructors

        public NumberOfEventsStoredInNode(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public NumberOfEventsStoredInNode() : base(CbusMessage.Create(new byte[] {116})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} Value: {this.Value:X2}";

        #endregion
	}
	
    #endregion

    #region 0x75 CANID Set a CAN_ID in existing FLiM node

    /// <summary>
	/// CANID
    /// Set a CAN_ID in existing FLiM node
    /// Used to force a specified CAN_ID into a node. Value range is from 1 to 0x63 (99 decimal) This OPC must be used with care as duplicate CAN_IDs are not allowed.. Values outside the permitted range will produce an error 7 message.and the CAN_ID will not change.
    /// </summary>
    [OpCode(
        Code = "CANID", 
        Description = "Used to force a specified CAN_ID into a node. Value range is from 1 to 0x63 (99 decimal) This OPC must be used with care as duplicate CAN_IDs are not allowed.. Values outside the permitted range will produce an error 7 message.and the CAN_ID will not change.",
        Group = "Config", 
        Name = "Set a CAN_ID in existing FLiM node", 
        Number = 117, 
        Priority = 3)]
    public partial class SetACan_idInExistingFlimNode : OpCodeData3, // 0x75
        IHasNodeNumber,
        IHasCAN_ID,
        ISetACan_idInExistingFlimNode
    {
        #region Fields

        public const string CODE = "CANID";
        public const string DESCRIPTION = "Used to force a specified CAN_ID into a node. Value range is from 1 to 0x63 (99 decimal) This OPC must be used with care as duplicate CAN_IDs are not allowed.. Values outside the permitted range will produce an error 7 message.and the CAN_ID will not change.";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Set a CAN_ID in existing FLiM node";
        public const byte NUMBER = 0x75; // 117
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public byte CAN_ID
        {
            get => ConvertToByte(3);
            set => ConvertFromByte(3, value);
        }

        #endregion

        #region Constructors

        public SetACan_idInExistingFlimNode(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public SetACan_idInExistingFlimNode() : base(CbusMessage.Create(new byte[] {117})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} CAN_ID: {this.CAN_ID}";

        #endregion
	}
	
    #endregion

    #region 0x7F EXTC2 Extended opcode with 2 data bytes

    /// <summary>
	/// EXTC2
    /// Extended opcode with 2 data bytes
    /// Used if the basic set of 32 OPCs is not enough. Allows an additional 256 opcodes.
    /// </summary>
    [OpCode(
        Code = "EXTC2", 
        Description = "Used if the basic set of 32 OPCs is not enough. Allows an additional 256 opcodes.",
        Group = "General", 
        Name = "Extended opcode with 2 data bytes", 
        Number = 127, 
        Priority = 3)]
    public partial class ExtendedOpcodeWith2DataBytes : OpCodeData3, // 0x7F
        IHasExtendedOpCode,
        IHasData1,
        IHasData2,
        IExtendedOpcodeWith2DataBytes
    {
        #region Fields

        public const string CODE = "EXTC2";
        public const string DESCRIPTION = "Used if the basic set of 32 OPCs is not enough. Allows an additional 256 opcodes.";
        public const OpCodeGroup GROUP = OpCodeGroup.General;
        public const string NAME = "Extended opcode with 2 data bytes";
        public const byte NUMBER = 0x7F; // 127
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public byte ExtendedOpCode
        {
            get => ConvertToByte(1);
            set => ConvertFromByte(1, value);
        }
        public byte Data1
        {
            get => ConvertToByte(2);
            set => ConvertFromByte(2, value);
        }
        public byte Data2
        {
            get => ConvertToByte(3);
            set => ConvertFromByte(3, value);
        }

        #endregion

        #region Constructors

        public ExtendedOpcodeWith2DataBytes(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public ExtendedOpcodeWith2DataBytes() : base(CbusMessage.Create(new byte[] {127})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} ExtendedOpCode: {this.ExtendedOpCode:X2} Data1: {this.Data1:X2} Data2: {this.Data2:X2}";

        #endregion
	}
	
    #endregion

    #region 0x80 RDCC3 Request 3 byte DCC Packet

    /// <summary>
	/// RDCC3
    /// Request 3 byte DCC Packet
    /// Allows a CAB or equivalent to request a 3 byte DCC packet to be sent to the track. The packet is sent <REP> times and is not refreshed on a regular basis. Note: a 3 byte DCC packet is the minimum allowed.
    /// </summary>
    [OpCode(
        Code = "RDCC3", 
        Description = "Allows a CAB or equivalent to request a 3 byte DCC packet to be sent to the track. The packet is sent <REP> times and is not refreshed on a regular basis. Note: a 3 byte DCC packet is the minimum allowed.",
        Group = "DCC", 
        Name = "Request 3 byte DCC Packet", 
        Number = 128, 
        Priority = 2)]
    public partial class Request3ByteDccPacket : OpCodeData4, // 0x80
        IHasRepetitions,
        IHasData1,
        IHasData2,
        IHasData3,
        IRequest3ByteDccPacket
    {
        #region Fields

        public const string CODE = "RDCC3";
        public const string DESCRIPTION = "Allows a CAB or equivalent to request a 3 byte DCC packet to be sent to the track. The packet is sent <REP> times and is not refreshed on a regular basis. Note: a 3 byte DCC packet is the minimum allowed.";
        public const OpCodeGroup GROUP = OpCodeGroup.DCC;
        public const string NAME = "Request 3 byte DCC Packet";
        public const byte NUMBER = 0x80; // 128
        public const int PRIORITY = 2;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public byte Repetitions
        {
            get => ConvertToByte(1);
            set => ConvertFromByte(1, value);
        }
        public byte Data1
        {
            get => ConvertToByte(2);
            set => ConvertFromByte(2, value);
        }
        public byte Data2
        {
            get => ConvertToByte(3);
            set => ConvertFromByte(3, value);
        }
        public byte Data3
        {
            get => ConvertToByte(4);
            set => ConvertFromByte(4, value);
        }

        #endregion

        #region Constructors

        public Request3ByteDccPacket(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public Request3ByteDccPacket() : base(CbusMessage.Create(new byte[] {128})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} Repetitions: {this.Repetitions} Data1: {this.Data1:X2} Data2: {this.Data2:X2} Data3: {this.Data3:X2}";

        #endregion
	}
	
    #endregion

    #region 0x82 WCVO Write CV (byte) in OPS mode

    /// <summary>
	/// WCVO
    /// Write CV (byte) in OPS mode
    /// Sent to the command station to write a DCC CV byte in OPS mode to specific loco.(on the main).
    /// </summary>
    [OpCode(
        Code = "WCVO", 
        Description = "Sent to the command station to write a DCC CV byte in OPS mode to specific loco.(on the main).",
        Group = "DCC", 
        Name = "Write CV (byte) in OPS mode", 
        Number = 130, 
        Priority = 2)]
    public partial class WriteCvByteInOpsMode : OpCodeData4, // 0x82
        IHasSession,
        IHasCV,
        IHasValue,
        IWriteCvByteInOpsMode
    {
        #region Fields

        public const string CODE = "WCVO";
        public const string DESCRIPTION = "Sent to the command station to write a DCC CV byte in OPS mode to specific loco.(on the main).";
        public const OpCodeGroup GROUP = OpCodeGroup.DCC;
        public const string NAME = "Write CV (byte) in OPS mode";
        public const byte NUMBER = 0x82; // 130
        public const int PRIORITY = 2;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public byte Session
        {
            get => ConvertToByte(1);
            set => ConvertFromByte(1, value);
        }
        public ushort CV
        {
            get => ConvertToUShort(new int[] { 2,3 });
            set => ConvertFromUShort(new int[] { 2,3 }, value);
        }
        public byte Value
        {
            get => ConvertToByte(4);
            set => ConvertFromByte(4, value);
        }

        #endregion

        #region Constructors

        public WriteCvByteInOpsMode(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public WriteCvByteInOpsMode() : base(CbusMessage.Create(new byte[] {130})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} Session: {this.Session} CV: {this.CV} Value: {this.Value:X2}";

        #endregion
	}
	
    #endregion

    #region 0x83 WCVB Write CV (bit) in OPS mode

    /// <summary>
	/// WCVB
    /// Write CV (bit) in OPS mode
    /// Sent to the command station to write a DCC CV in OPS mode to specific loco.(on the main).
    /// </summary>
    [OpCode(
        Code = "WCVB", 
        Description = "Sent to the command station to write a DCC CV in OPS mode to specific loco.(on the main).",
        Group = "DCC", 
        Name = "Write CV (bit) in OPS mode", 
        Number = 131, 
        Priority = 2)]
    public partial class WriteCvBitInOpsMode : OpCodeData4, // 0x83
        IHasSession,
        IHasCV,
        IHasValue,
        IWriteCvBitInOpsMode
    {
        #region Fields

        public const string CODE = "WCVB";
        public const string DESCRIPTION = "Sent to the command station to write a DCC CV in OPS mode to specific loco.(on the main).";
        public const OpCodeGroup GROUP = OpCodeGroup.DCC;
        public const string NAME = "Write CV (bit) in OPS mode";
        public const byte NUMBER = 0x83; // 131
        public const int PRIORITY = 2;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public byte Session
        {
            get => ConvertToByte(1);
            set => ConvertFromByte(1, value);
        }
        public ushort CV
        {
            get => ConvertToUShort(new int[] { 2,3 });
            set => ConvertFromUShort(new int[] { 2,3 }, value);
        }
        public byte Value
        {
            get => ConvertToByte(4);
            set => ConvertFromByte(4, value);
        }

        #endregion

        #region Constructors

        public WriteCvBitInOpsMode(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public WriteCvBitInOpsMode() : base(CbusMessage.Create(new byte[] {131})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} Session: {this.Session} CV: {this.CV} Value: {this.Value:X2}";

        #endregion
	}
	
    #endregion

    #region 0x84 QCVS Read CV

    /// <summary>
	/// QCVS
    /// Read CV
    /// This command is used exclusively with service mode. Sent by the cab to the command station in order to read a CV value. The command station shall respond with a PCVS message containing the value read
    /// </summary>
    [OpCode(
        Code = "QCVS", 
        Description = "This command is used exclusively with service mode. Sent by the cab to the command station in order to read a CV value. The command station shall respond with a PCVS message containing the value read",
        Group = "DCC", 
        Name = "Read CV", 
        Number = 132, 
        Priority = 2)]
    public partial class ReadCv : OpCodeData4, // 0x84
        IHasSession,
        IHasCV,
        IHasMode,
        IReadCv
    {
        #region Fields

        public const string CODE = "QCVS";
        public const string DESCRIPTION = "This command is used exclusively with service mode. Sent by the cab to the command station in order to read a CV value. The command station shall respond with a PCVS message containing the value read";
        public const OpCodeGroup GROUP = OpCodeGroup.DCC;
        public const string NAME = "Read CV";
        public const byte NUMBER = 0x84; // 132
        public const int PRIORITY = 2;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public byte Session
        {
            get => ConvertToByte(1);
            set => ConvertFromByte(1, value);
        }
        public ushort CV
        {
            get => ConvertToUShort(new int[] { 2,3 });
            set => ConvertFromUShort(new int[] { 2,3 }, value);
        }
        public byte Mode
        {
            get => ConvertToByte(4);
            set => ConvertFromByte(4, value);
        }

        #endregion

        #region Constructors

        public ReadCv(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public ReadCv() : base(CbusMessage.Create(new byte[] {132})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} Session: {this.Session} CV: {this.CV} Mode: {this.Mode}";

        #endregion
	}
	
    #endregion

    #region 0x85 PCVS Report CV

    /// <summary>
	/// PCVS
    /// Report CV
    /// This command is used exclusively with service mode. Sent by the command station to report a read CV.
    /// </summary>
    [OpCode(
        Code = "PCVS", 
        Description = "This command is used exclusively with service mode. Sent by the command station to report a read CV.",
        Group = "DCC", 
        Name = "Report CV", 
        Number = 133, 
        Priority = 2)]
    public partial class ReportCv : OpCodeData4, // 0x85
        IReplyTo<ReadCv>,
        IHasSession,
        IHasCV,
        IHasValue,
        IReportCv
    {
        #region Fields

        public const string CODE = "PCVS";
        public const string DESCRIPTION = "This command is used exclusively with service mode. Sent by the command station to report a read CV.";
        public const OpCodeGroup GROUP = OpCodeGroup.DCC;
        public const string NAME = "Report CV";
        public const byte NUMBER = 0x85; // 133
        public const int PRIORITY = 2;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public byte Session
        {
            get => ConvertToByte(1);
            set => ConvertFromByte(1, value);
        }
        public ushort CV
        {
            get => ConvertToUShort(new int[] { 2,3 });
            set => ConvertFromUShort(new int[] { 2,3 }, value);
        }
        public byte Value
        {
            get => ConvertToByte(4);
            set => ConvertFromByte(4, value);
        }

        #endregion

        #region Constructors

        public ReportCv(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public ReportCv() : base(CbusMessage.Create(new byte[] {133})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} Session: {this.Session} CV: {this.CV} Value: {this.Value:X2}";

        #endregion
	}
	
    #endregion

    #region 0x90 ACON Accessory On

    /// <summary>
	/// ACON
    /// Accessory On
    /// Indicates an ‘ON’ event using the full event number of 4 bytes. (long event).
    /// </summary>
    [OpCode(
        Code = "ACON", 
        Description = "Indicates an ‘ON’ event using the full event number of 4 bytes. (long event).",
        Group = "Accessory", 
        Name = "Accessory On", 
        Number = 144, 
        Priority = 3)]
    public partial class AccessoryOn : OpCodeData4, // 0x90
        IHasNodeNumber,
        IHasEventNumber,
        IAccessoryOn
    {
        #region Fields

        public const string CODE = "ACON";
        public const string DESCRIPTION = "Indicates an ‘ON’ event using the full event number of 4 bytes. (long event).";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Accessory On";
        public const byte NUMBER = 0x90; // 144
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort EventNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }

        #endregion

        #region Constructors

        public AccessoryOn(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AccessoryOn() : base(CbusMessage.Create(new byte[] {144})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} EventNumber: {this.EventNumber}";

        #endregion
	}
	
    #endregion

    #region 0x91 ACOF Accessory Off

    /// <summary>
	/// ACOF
    /// Accessory Off
    /// Indicates an ‘OFF’ event using the full event number of 4 bytes. (long event).
    /// </summary>
    [OpCode(
        Code = "ACOF", 
        Description = "Indicates an ‘OFF’ event using the full event number of 4 bytes. (long event).",
        Group = "Accessory", 
        Name = "Accessory Off", 
        Number = 145, 
        Priority = 3)]
    public partial class AccessoryOff : OpCodeData4, // 0x91
        IHasNodeNumber,
        IHasEventNumber,
        IAccessoryOff
    {
        #region Fields

        public const string CODE = "ACOF";
        public const string DESCRIPTION = "Indicates an ‘OFF’ event using the full event number of 4 bytes. (long event).";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Accessory Off";
        public const byte NUMBER = 0x91; // 145
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort EventNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }

        #endregion

        #region Constructors

        public AccessoryOff(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AccessoryOff() : base(CbusMessage.Create(new byte[] {145})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} EventNumber: {this.EventNumber}";

        #endregion
	}
	
    #endregion

    #region 0x92 AREQ Accessory Request Event

    /// <summary>
	/// AREQ
    /// Accessory Request Event
    /// Indicates a ‘request’ event using the full event number of 4 bytes. (long event)./r/nA request event is used to elicit a status response from a producer when it is required to know the ‘state’ of the producer without producing an ON or OFF event and to trigger an event from a ‘combi’ node.
    /// </summary>
    [OpCode(
        Code = "AREQ", 
        Description = "Indicates a ‘request’ event using the full event number of 4 bytes. (long event)./r/nA request event is used to elicit a status response from a producer when it is required to know the ‘state’ of the producer without producing an ON or OFF event and to trigger an event from a ‘combi’ node.",
        Group = "Accessory", 
        Name = "Accessory Request Event", 
        Number = 146, 
        Priority = 3)]
    public partial class AccessoryRequestEvent : OpCodeData4, // 0x92
        IHasNodeNumber,
        IHasEventNumber,
        IAccessoryRequestEvent
    {
        #region Fields

        public const string CODE = "AREQ";
        public const string DESCRIPTION = "Indicates a ‘request’ event using the full event number of 4 bytes. (long event)./r/nA request event is used to elicit a status response from a producer when it is required to know the ‘state’ of the producer without producing an ON or OFF event and to trigger an event from a ‘combi’ node.";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Accessory Request Event";
        public const byte NUMBER = 0x92; // 146
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort EventNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }

        #endregion

        #region Constructors

        public AccessoryRequestEvent(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AccessoryRequestEvent() : base(CbusMessage.Create(new byte[] {146})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} EventNumber: {this.EventNumber}";

        #endregion
	}
	
    #endregion

    #region 0x93 ARON Accessory On Response Event

    /// <summary>
	/// ARON
    /// Accessory On Response Event
    /// Indicates an ‘ON’ response event. A response event is a reply to a status request AREQ (0x92) without producing an ON or OFF event.
    /// </summary>
    [OpCode(
        Code = "ARON", 
        Description = "Indicates an ‘ON’ response event. A response event is a reply to a status request AREQ (0x92) without producing an ON or OFF event.",
        Group = "Accessory", 
        Name = "Accessory On Response Event", 
        Number = 147, 
        Priority = 3)]
    public partial class AccessoryOnResponseEvent : OpCodeData4, // 0x93
        IReplyTo<AccessoryRequestEvent>,
        IHasNodeNumber,
        IHasEventNumber,
        IAccessoryOnResponseEvent
    {
        #region Fields

        public const string CODE = "ARON";
        public const string DESCRIPTION = "Indicates an ‘ON’ response event. A response event is a reply to a status request AREQ (0x92) without producing an ON or OFF event.";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Accessory On Response Event";
        public const byte NUMBER = 0x93; // 147
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort EventNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }

        #endregion

        #region Constructors

        public AccessoryOnResponseEvent(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AccessoryOnResponseEvent() : base(CbusMessage.Create(new byte[] {147})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} EventNumber: {this.EventNumber}";

        #endregion
	}
	
    #endregion

    #region 0x94 AROF Accessory Off Response Event

    /// <summary>
	/// AROF
    /// Accessory Off Response Event
    /// Indicates an ‘OFF’ response event. A response event is a reply to a status request AREQ (0x92) without producing an ON or OFF event.
    /// </summary>
    [OpCode(
        Code = "AROF", 
        Description = "Indicates an ‘OFF’ response event. A response event is a reply to a status request AREQ (0x92) without producing an ON or OFF event.",
        Group = "Accessory", 
        Name = "Accessory Off Response Event", 
        Number = 148, 
        Priority = 3)]
    public partial class AccessoryOffResponseEvent : OpCodeData4, // 0x94
        IReplyTo<AccessoryRequestEvent>,
        IHasNodeNumber,
        IHasEventNumber,
        IAccessoryOffResponseEvent
    {
        #region Fields

        public const string CODE = "AROF";
        public const string DESCRIPTION = "Indicates an ‘OFF’ response event. A response event is a reply to a status request AREQ (0x92) without producing an ON or OFF event.";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Accessory Off Response Event";
        public const byte NUMBER = 0x94; // 148
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort EventNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }

        #endregion

        #region Constructors

        public AccessoryOffResponseEvent(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AccessoryOffResponseEvent() : base(CbusMessage.Create(new byte[] {148})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} EventNumber: {this.EventNumber}";

        #endregion
	}
	
    #endregion

    #region 0x95 EVULN Unlearn an event in learn mode

    /// <summary>
	/// EVULN
    /// Unlearn an event in learn mode
    /// Sent by a configuration tool to remove an event from a node.
    /// </summary>
    [OpCode(
        Code = "EVULN", 
        Description = "Sent by a configuration tool to remove an event from a node.",
        Group = "Config", 
        Name = "Unlearn an event in learn mode", 
        Number = 149, 
        Priority = 3)]
    public partial class UnlearnAnEventInLearnMode : OpCodeData4, // 0x95
        IHasNodeNumber,
        IHasEventNumber,
        IUnlearnAnEventInLearnMode
    {
        #region Fields

        public const string CODE = "EVULN";
        public const string DESCRIPTION = "Sent by a configuration tool to remove an event from a node.";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Unlearn an event in learn mode";
        public const byte NUMBER = 0x95; // 149
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort EventNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }

        #endregion

        #region Constructors

        public UnlearnAnEventInLearnMode(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public UnlearnAnEventInLearnMode() : base(CbusMessage.Create(new byte[] {149})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} EventNumber: {this.EventNumber}";

        #endregion
	}
	
    #endregion

    #region 0x96 NVSET Set a node variable

    /// <summary>
	/// NVSET
    /// Set a node variable
    /// Sent by a configuration tool to set a node variable.
    /// </summary>
    [OpCode(
        Code = "NVSET", 
        Description = "Sent by a configuration tool to set a node variable.",
        Group = "Config", 
        Name = "Set a node variable", 
        Number = 150, 
        Priority = 3)]
    public partial class SetANodeVariable : OpCodeData4, // 0x96
        IHasNodeNumber,
        IHasNVIndex,
        IHasValue,
        ISetANodeVariable
    {
        #region Fields

        public const string CODE = "NVSET";
        public const string DESCRIPTION = "Sent by a configuration tool to set a node variable.";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Set a node variable";
        public const byte NUMBER = 0x96; // 150
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public byte NVIndex
        {
            get => ConvertToByte(3);
            set => ConvertFromByte(3, value);
        }
        public byte Value
        {
            get => ConvertToByte(4);
            set => ConvertFromByte(4, value);
        }

        #endregion

        #region Constructors

        public SetANodeVariable(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public SetANodeVariable() : base(CbusMessage.Create(new byte[] {150})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} NVIndex: {this.NVIndex} Value: {this.Value:X2}";

        #endregion
	}
	
    #endregion

    #region 0x97 NVANS Response to a request for a node variable value

    /// <summary>
	/// NVANS
    /// Response to a request for a node variable value
    /// Sent by node in response to request NVRD (0x71).
    /// </summary>
    [OpCode(
        Code = "NVANS", 
        Description = "Sent by node in response to request NVRD (0x71).",
        Group = "Config", 
        Name = "Response to a request for a node variable value", 
        Number = 151, 
        Priority = 3)]
    public partial class ResponseToARequestForANodeVariableValue : OpCodeData4, // 0x97
        IReplyTo<RequestReadOfANodeVariable>,
        IHasNodeNumber,
        IHasNVIndex,
        IHasValue,
        IResponseToARequestForANodeVariableValue
    {
        #region Fields

        public const string CODE = "NVANS";
        public const string DESCRIPTION = "Sent by node in response to request NVRD (0x71).";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Response to a request for a node variable value";
        public const byte NUMBER = 0x97; // 151
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public byte NVIndex
        {
            get => ConvertToByte(3);
            set => ConvertFromByte(3, value);
        }
        public byte Value
        {
            get => ConvertToByte(4);
            set => ConvertFromByte(4, value);
        }

        #endregion

        #region Constructors

        public ResponseToARequestForANodeVariableValue(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public ResponseToARequestForANodeVariableValue() : base(CbusMessage.Create(new byte[] {151})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} NVIndex: {this.NVIndex} Value: {this.Value:X2}";

        #endregion
	}
	
    #endregion

    #region 0x98 ASON Accessory Short On

    /// <summary>
	/// ASON
    /// Accessory Short On
    /// Indicates an ‘ON’ event using the short event number of 2 LS bytes.
    /// </summary>
    [OpCode(
        Code = "ASON", 
        Description = "Indicates an ‘ON’ event using the short event number of 2 LS bytes.",
        Group = "Accessory", 
        Name = "Accessory Short On", 
        Number = 152, 
        Priority = 3)]
    public partial class AccessoryShortOn : OpCodeData4, // 0x98
        IHasNodeNumber,
        IHasDeviceNumber,
        IAccessoryShortOn
    {
        #region Fields

        public const string CODE = "ASON";
        public const string DESCRIPTION = "Indicates an ‘ON’ event using the short event number of 2 LS bytes.";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Accessory Short On";
        public const byte NUMBER = 0x98; // 152
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort DeviceNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }

        #endregion

        #region Constructors

        public AccessoryShortOn(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AccessoryShortOn() : base(CbusMessage.Create(new byte[] {152})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} DeviceNumber: {this.DeviceNumber}";

        #endregion
	}
	
    #endregion

    #region 0x99 ASOF Accessory Short Off

    /// <summary>
	/// ASOF
    /// Accessory Short Off
    /// Indicates an ‘OFF’ event using the short event number of 2 LS bytes.
    /// </summary>
    [OpCode(
        Code = "ASOF", 
        Description = "Indicates an ‘OFF’ event using the short event number of 2 LS bytes.",
        Group = "Accessory", 
        Name = "Accessory Short Off", 
        Number = 153, 
        Priority = 3)]
    public partial class AccessoryShortOff : OpCodeData4, // 0x99
        IHasNodeNumber,
        IHasDeviceNumber,
        IAccessoryShortOff
    {
        #region Fields

        public const string CODE = "ASOF";
        public const string DESCRIPTION = "Indicates an ‘OFF’ event using the short event number of 2 LS bytes.";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Accessory Short Off";
        public const byte NUMBER = 0x99; // 153
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort DeviceNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }

        #endregion

        #region Constructors

        public AccessoryShortOff(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AccessoryShortOff() : base(CbusMessage.Create(new byte[] {153})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} DeviceNumber: {this.DeviceNumber}";

        #endregion
	}
	
    #endregion

    #region 0x9A ASRQ Accessory Short Request Event

    /// <summary>
	/// ASRQ
    /// Accessory Short Request Event
    /// Indicates a ‘request’ event using the short event number of 2 LS bytes. A request event is used to elicit a response from a producer ‘device’ when it is required to know the ‘state’ of the device without producing an ON or OFF event and to trigger an event from a “combi” node.
    /// </summary>
    [OpCode(
        Code = "ASRQ", 
        Description = "Indicates a ‘request’ event using the short event number of 2 LS bytes. A request event is used to elicit a response from a producer ‘device’ when it is required to know the ‘state’ of the device without producing an ON or OFF event and to trigger an event from a “combi” node.",
        Group = "Accessory", 
        Name = "Accessory Short Request Event", 
        Number = 154, 
        Priority = 3)]
    public partial class AccessoryShortRequestEvent : OpCodeData4, // 0x9A
        IHasNodeNumber,
        IHasDeviceNumber,
        IAccessoryShortRequestEvent
    {
        #region Fields

        public const string CODE = "ASRQ";
        public const string DESCRIPTION = "Indicates a ‘request’ event using the short event number of 2 LS bytes. A request event is used to elicit a response from a producer ‘device’ when it is required to know the ‘state’ of the device without producing an ON or OFF event and to trigger an event from a “combi” node.";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Accessory Short Request Event";
        public const byte NUMBER = 0x9A; // 154
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort DeviceNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }

        #endregion

        #region Constructors

        public AccessoryShortRequestEvent(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AccessoryShortRequestEvent() : base(CbusMessage.Create(new byte[] {154})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} DeviceNumber: {this.DeviceNumber}";

        #endregion
	}
	
    #endregion

    #region 0x9B PARAN Response to request for individual node parameter

    /// <summary>
	/// PARAN
    /// Response to request for individual node parameter
    /// The response to a request for an individual node parameter.
    /// </summary>
    [OpCode(
        Code = "PARAN", 
        Description = "The response to a request for an individual node parameter.",
        Group = "Config", 
        Name = "Response to request for individual node parameter", 
        Number = 155, 
        Priority = 3)]
    public partial class ResponseToRequestForIndividualNodeParameter : OpCodeData4, // 0x9B
        IReplyTo<RequestReadOfANodeParameterByIndex>,
        IHasNodeNumber,
        IHasParamIndex,
        IHasValue,
        IResponseToRequestForIndividualNodeParameter
    {
        #region Fields

        public const string CODE = "PARAN";
        public const string DESCRIPTION = "The response to a request for an individual node parameter.";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Response to request for individual node parameter";
        public const byte NUMBER = 0x9B; // 155
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public byte ParamIndex
        {
            get => ConvertToByte(3);
            set => ConvertFromByte(3, value);
        }
        public byte Value
        {
            get => ConvertToByte(4);
            set => ConvertFromByte(4, value);
        }

        #endregion

        #region Constructors

        public ResponseToRequestForIndividualNodeParameter(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public ResponseToRequestForIndividualNodeParameter() : base(CbusMessage.Create(new byte[] {155})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} ParamIndex: {this.ParamIndex} Value: {this.Value:X2}";

        #endregion
	}
	
    #endregion

    #region 0x9C REVAL Request for read of an event variable

    /// <summary>
	/// REVAL
    /// Request for read of an event variable
    /// This request differs from REQEV (0xB2) as it doesn’t need to be in learn mode but does require the knowledge of the event index to which the EV request is directed. Response is NEVAL (0xB5).
    /// </summary>
    [OpCode(
        Code = "REVAL", 
        Description = "This request differs from REQEV (0xB2) as it doesn’t need to be in learn mode but does require the knowledge of the event index to which the EV request is directed. Response is NEVAL (0xB5).",
        Group = "Config", 
        Name = "Request for read of an event variable", 
        Number = 156, 
        Priority = 3)]
    public partial class RequestForReadOfAnEventVariable : OpCodeData4, // 0x9C
        IHasNodeNumber,
        IHasENIndex,
        IHasEVIndex,
        IRequestForReadOfAnEventVariable
    {
        #region Fields

        public const string CODE = "REVAL";
        public const string DESCRIPTION = "This request differs from REQEV (0xB2) as it doesn’t need to be in learn mode but does require the knowledge of the event index to which the EV request is directed. Response is NEVAL (0xB5).";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Request for read of an event variable";
        public const byte NUMBER = 0x9C; // 156
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public byte ENIndex
        {
            get => ConvertToByte(3);
            set => ConvertFromByte(3, value);
        }
        public byte EVIndex
        {
            get => ConvertToByte(4);
            set => ConvertFromByte(4, value);
        }

        #endregion

        #region Constructors

        public RequestForReadOfAnEventVariable(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public RequestForReadOfAnEventVariable() : base(CbusMessage.Create(new byte[] {156})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} ENIndex: {this.ENIndex} EVIndex: {this.EVIndex}";

        #endregion
	}
	
    #endregion

    #region 0x9D ARSON Accessory Short Response On

    /// <summary>
	/// ARSON
    /// Accessory Short Response On
    /// Indicates an ‘ON’ response event. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.
    /// </summary>
    [OpCode(
        Code = "ARSON", 
        Description = "Indicates an ‘ON’ response event. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.",
        Group = "Accessory", 
        Name = "Accessory Short Response On", 
        Number = 157, 
        Priority = 3)]
    public partial class AccessoryShortResponseOn : OpCodeData4, // 0x9D
        IReplyTo<AccessoryShortRequestEvent>,
        IHasNodeNumber,
        IHasDeviceNumber,
        IAccessoryShortResponseOn
    {
        #region Fields

        public const string CODE = "ARSON";
        public const string DESCRIPTION = "Indicates an ‘ON’ response event. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Accessory Short Response On";
        public const byte NUMBER = 0x9D; // 157
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort DeviceNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }

        #endregion

        #region Constructors

        public AccessoryShortResponseOn(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AccessoryShortResponseOn() : base(CbusMessage.Create(new byte[] {157})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} DeviceNumber: {this.DeviceNumber}";

        #endregion
	}
	
    #endregion

    #region 0x9E ARSOF Accessory Short Response Off

    /// <summary>
	/// ARSOF
    /// Accessory Short Response Off
    /// Indicates an ‘OFF’ response event. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.
    /// </summary>
    [OpCode(
        Code = "ARSOF", 
        Description = "Indicates an ‘OFF’ response event. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.",
        Group = "Accessory", 
        Name = "Accessory Short Response Off", 
        Number = 158, 
        Priority = 3)]
    public partial class AccessoryShortResponseOff : OpCodeData4, // 0x9E
        IReplyTo<AccessoryShortRequestEvent>,
        IHasNodeNumber,
        IHasDeviceNumber,
        IAccessoryShortResponseOff
    {
        #region Fields

        public const string CODE = "ARSOF";
        public const string DESCRIPTION = "Indicates an ‘OFF’ response event. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Accessory Short Response Off";
        public const byte NUMBER = 0x9E; // 158
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort DeviceNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }

        #endregion

        #region Constructors

        public AccessoryShortResponseOff(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AccessoryShortResponseOff() : base(CbusMessage.Create(new byte[] {158})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} DeviceNumber: {this.DeviceNumber}";

        #endregion
	}
	
    #endregion

    #region 0x9F EXTC3 Extended opcode with 3 data bytes

    /// <summary>
	/// EXTC3
    /// Extended opcode with 3 data bytes
    /// Used if the basic set of 32 OPCs is not enough. Allows an additional 256 opcodes.
    /// </summary>
    [OpCode(
        Code = "EXTC3", 
        Description = "Used if the basic set of 32 OPCs is not enough. Allows an additional 256 opcodes.",
        Group = "General", 
        Name = "Extended opcode with 3 data bytes", 
        Number = 159, 
        Priority = 3)]
    public partial class ExtendedOpcodeWith3DataBytes : OpCodeData4, // 0x9F
        IHasExtendedOpCode,
        IHasData1,
        IHasData2,
        IHasData3,
        IExtendedOpcodeWith3DataBytes
    {
        #region Fields

        public const string CODE = "EXTC3";
        public const string DESCRIPTION = "Used if the basic set of 32 OPCs is not enough. Allows an additional 256 opcodes.";
        public const OpCodeGroup GROUP = OpCodeGroup.General;
        public const string NAME = "Extended opcode with 3 data bytes";
        public const byte NUMBER = 0x9F; // 159
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public byte ExtendedOpCode
        {
            get => ConvertToByte(1);
            set => ConvertFromByte(1, value);
        }
        public byte Data1
        {
            get => ConvertToByte(2);
            set => ConvertFromByte(2, value);
        }
        public byte Data2
        {
            get => ConvertToByte(3);
            set => ConvertFromByte(3, value);
        }
        public byte Data3
        {
            get => ConvertToByte(4);
            set => ConvertFromByte(4, value);
        }

        #endregion

        #region Constructors

        public ExtendedOpcodeWith3DataBytes(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public ExtendedOpcodeWith3DataBytes() : base(CbusMessage.Create(new byte[] {159})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} ExtendedOpCode: {this.ExtendedOpCode:X2} Data1: {this.Data1:X2} Data2: {this.Data2:X2} Data3: {this.Data3:X2}";

        #endregion
	}
	
    #endregion

    #region 0xA0 RDCC4 Request 4 byte DCC Packet

    /// <summary>
	/// RDCC4
    /// Request 4 byte DCC Packet
    /// Allows a CAB or equivalent to request a 4 byte DCC packet to be sent to the track. The packet is sent <REP> times and is not refreshed on a regular basis.
    /// </summary>
    [OpCode(
        Code = "RDCC4", 
        Description = "Allows a CAB or equivalent to request a 4 byte DCC packet to be sent to the track. The packet is sent <REP> times and is not refreshed on a regular basis.",
        Group = "DCC", 
        Name = "Request 4 byte DCC Packet", 
        Number = 160, 
        Priority = 2)]
    public partial class Request4ByteDccPacket : OpCodeData5, // 0xA0
        IHasRepetitions,
        IHasData1,
        IHasData2,
        IHasData3,
        IHasData4,
        IRequest4ByteDccPacket
    {
        #region Fields

        public const string CODE = "RDCC4";
        public const string DESCRIPTION = "Allows a CAB or equivalent to request a 4 byte DCC packet to be sent to the track. The packet is sent <REP> times and is not refreshed on a regular basis.";
        public const OpCodeGroup GROUP = OpCodeGroup.DCC;
        public const string NAME = "Request 4 byte DCC Packet";
        public const byte NUMBER = 0xA0; // 160
        public const int PRIORITY = 2;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public byte Repetitions
        {
            get => ConvertToByte(1);
            set => ConvertFromByte(1, value);
        }
        public byte Data1
        {
            get => ConvertToByte(2);
            set => ConvertFromByte(2, value);
        }
        public byte Data2
        {
            get => ConvertToByte(3);
            set => ConvertFromByte(3, value);
        }
        public byte Data3
        {
            get => ConvertToByte(4);
            set => ConvertFromByte(4, value);
        }
        public byte Data4
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }

        #endregion

        #region Constructors

        public Request4ByteDccPacket(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public Request4ByteDccPacket() : base(CbusMessage.Create(new byte[] {160})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} Repetitions: {this.Repetitions} Data1: {this.Data1:X2} Data2: {this.Data2:X2} Data3: {this.Data3:X2} Data4: {this.Data4:X2}";

        #endregion
	}
	
    #endregion

    #region 0xA2 WCVS Write CV in Service mode

    /// <summary>
	/// WCVS
    /// Write CV in Service mode
    /// Sent to the command station to write a DCC CV in service mode.
    /// </summary>
    [OpCode(
        Code = "WCVS", 
        Description = "Sent to the command station to write a DCC CV in service mode.",
        Group = "DCC", 
        Name = "Write CV in Service mode", 
        Number = 162, 
        Priority = 2)]
    public partial class WriteCvInServiceMode : OpCodeData5, // 0xA2
        IHasSession,
        IHasCV,
        IHasServiceMode,
        IHasValue,
        IWriteCvInServiceMode
    {
        #region Fields

        public const string CODE = "WCVS";
        public const string DESCRIPTION = "Sent to the command station to write a DCC CV in service mode.";
        public const OpCodeGroup GROUP = OpCodeGroup.DCC;
        public const string NAME = "Write CV in Service mode";
        public const byte NUMBER = 0xA2; // 162
        public const int PRIORITY = 2;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public byte Session
        {
            get => ConvertToByte(1);
            set => ConvertFromByte(1, value);
        }
        public ushort CV
        {
            get => ConvertToUShort(new int[] { 2,3 });
            set => ConvertFromUShort(new int[] { 2,3 }, value);
        }
        public ServiceModeEnum ServiceMode
        {
            get => ConvertToEnum<ServiceModeEnum>(4);
            set => ConvertFromEnum<ServiceModeEnum>(4, value);
        }
        public byte Value
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }

        #endregion

        #region Constructors

        public WriteCvInServiceMode(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public WriteCvInServiceMode() : base(CbusMessage.Create(new byte[] {162})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} Session: {this.Session} CV: {this.CV} ServiceMode: {this.ServiceMode:F} Value: {this.Value:X2}";

        #endregion
	}
	
    #endregion

    #region 0xB0 ACON1 Accessory On 1

    /// <summary>
	/// ACON1
    /// Accessory On 1
    /// Indicates an ‘ON’ event using the full event number of 4 bytes with one additional data byte.
    /// </summary>
    [OpCode(
        Code = "ACON1", 
        Description = "Indicates an ‘ON’ event using the full event number of 4 bytes with one additional data byte.",
        Group = "Accessory", 
        Name = "Accessory On 1", 
        Number = 176, 
        Priority = 3)]
    public partial class AccessoryOn1 : OpCodeData5, // 0xB0
        IHasNodeNumber,
        IHasEventNumber,
        IHasData1,
        IAccessoryOn1
    {
        #region Fields

        public const string CODE = "ACON1";
        public const string DESCRIPTION = "Indicates an ‘ON’ event using the full event number of 4 bytes with one additional data byte.";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Accessory On 1";
        public const byte NUMBER = 0xB0; // 176
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort EventNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }
        public byte Data1
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }

        #endregion

        #region Constructors

        public AccessoryOn1(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AccessoryOn1() : base(CbusMessage.Create(new byte[] {176})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} EventNumber: {this.EventNumber} Data1: {this.Data1:X2}";

        #endregion
	}
	
    #endregion

    #region 0xB1 ACOF1 Accessory Off 1

    /// <summary>
	/// ACOF1
    /// Accessory Off 1
    /// Indicates an ‘OFF’ event using the full event number of 4 bytes with one additional data byte.
    /// </summary>
    [OpCode(
        Code = "ACOF1", 
        Description = "Indicates an ‘OFF’ event using the full event number of 4 bytes with one additional data byte.",
        Group = "Accessory", 
        Name = "Accessory Off 1", 
        Number = 177, 
        Priority = 3)]
    public partial class AccessoryOff1 : OpCodeData5, // 0xB1
        IHasNodeNumber,
        IHasEventNumber,
        IHasData1,
        IAccessoryOff1
    {
        #region Fields

        public const string CODE = "ACOF1";
        public const string DESCRIPTION = "Indicates an ‘OFF’ event using the full event number of 4 bytes with one additional data byte.";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Accessory Off 1";
        public const byte NUMBER = 0xB1; // 177
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort EventNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }
        public byte Data1
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }

        #endregion

        #region Constructors

        public AccessoryOff1(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AccessoryOff1() : base(CbusMessage.Create(new byte[] {177})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} EventNumber: {this.EventNumber} Data1: {this.Data1:X2}";

        #endregion
	}
	
    #endregion

    #region 0xB2 REQEV Read event variable in learn mode

    /// <summary>
	/// REQEV
    /// Read event variable in learn mode
    /// Allows a configuration tool to read stored event variables from a node. Reply is EVANS (0xD3).
    /// </summary>
    [OpCode(
        Code = "REQEV", 
        Description = "Allows a configuration tool to read stored event variables from a node. Reply is EVANS (0xD3).",
        Group = "Config", 
        Name = "Read event variable in learn mode", 
        Number = 178, 
        Priority = 3)]
    public partial class ReadEventVariableInLearnMode : OpCodeData5, // 0xB2
        IHasNodeNumber,
        IHasEventNumber,
        IHasEVIndex,
        IReadEventVariableInLearnMode
    {
        #region Fields

        public const string CODE = "REQEV";
        public const string DESCRIPTION = "Allows a configuration tool to read stored event variables from a node. Reply is EVANS (0xD3).";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Read event variable in learn mode";
        public const byte NUMBER = 0xB2; // 178
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort EventNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }
        public byte EVIndex
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }

        #endregion

        #region Constructors

        public ReadEventVariableInLearnMode(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public ReadEventVariableInLearnMode() : base(CbusMessage.Create(new byte[] {178})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} EventNumber: {this.EventNumber} EVIndex: {this.EVIndex}";

        #endregion
	}
	
    #endregion

    #region 0xB3 ARON1 Accessory On Response Event 1

    /// <summary>
	/// ARON1
    /// Accessory On Response Event 1
    /// Indicates an ‘ON’ response event with one additional data byte. A response event is a reply to a status request (AREQ) without producing an ON or OFF event.
    /// </summary>
    [OpCode(
        Code = "ARON1", 
        Description = "Indicates an ‘ON’ response event with one additional data byte. A response event is a reply to a status request (AREQ) without producing an ON or OFF event.",
        Group = "Accessory", 
        Name = "Accessory On Response Event 1", 
        Number = 179, 
        Priority = 3)]
    public partial class AccessoryOnResponseEvent1 : OpCodeData5, // 0xB3
        IReplyTo<AccessoryRequestEvent>,
        IHasNodeNumber,
        IHasEventNumber,
        IHasData1,
        IAccessoryOnResponseEvent1
    {
        #region Fields

        public const string CODE = "ARON1";
        public const string DESCRIPTION = "Indicates an ‘ON’ response event with one additional data byte. A response event is a reply to a status request (AREQ) without producing an ON or OFF event.";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Accessory On Response Event 1";
        public const byte NUMBER = 0xB3; // 179
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort EventNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }
        public byte Data1
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }

        #endregion

        #region Constructors

        public AccessoryOnResponseEvent1(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AccessoryOnResponseEvent1() : base(CbusMessage.Create(new byte[] {179})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} EventNumber: {this.EventNumber} Data1: {this.Data1:X2}";

        #endregion
	}
	
    #endregion

    #region 0xB4 AROF1 Accessory Off Response Event 1

    /// <summary>
	/// AROF1
    /// Accessory Off Response Event 1
    /// Indicates an ‘OFF’ response event with one additional data byte. A response event is a reply to a status request (AREQ) without producing an ON or OFF event.
    /// </summary>
    [OpCode(
        Code = "AROF1", 
        Description = "Indicates an ‘OFF’ response event with one additional data byte. A response event is a reply to a status request (AREQ) without producing an ON or OFF event.",
        Group = "Accessory", 
        Name = "Accessory Off Response Event 1", 
        Number = 180, 
        Priority = 3)]
    public partial class AccessoryOffResponseEvent1 : OpCodeData5, // 0xB4
        IReplyTo<AccessoryRequestEvent>,
        IHasNodeNumber,
        IHasEventNumber,
        IHasData1,
        IAccessoryOffResponseEvent1
    {
        #region Fields

        public const string CODE = "AROF1";
        public const string DESCRIPTION = "Indicates an ‘OFF’ response event with one additional data byte. A response event is a reply to a status request (AREQ) without producing an ON or OFF event.";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Accessory Off Response Event 1";
        public const byte NUMBER = 0xB4; // 180
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort EventNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }
        public byte Data1
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }

        #endregion

        #region Constructors

        public AccessoryOffResponseEvent1(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AccessoryOffResponseEvent1() : base(CbusMessage.Create(new byte[] {180})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} EventNumber: {this.EventNumber} Data1: {this.Data1:X2}";

        #endregion
	}
	
    #endregion

    #region 0xB5 NEVAL Response to request for read of EV value

    /// <summary>
	/// NEVAL
    /// Response to request for read of EV value
    /// This is response to REVAL (0x9C).
    /// </summary>
    [OpCode(
        Code = "NEVAL", 
        Description = "This is response to REVAL (0x9C).",
        Group = "Config", 
        Name = "Response to request for read of EV value", 
        Number = 181, 
        Priority = 3)]
    public partial class ResponseToRequestForReadOfEvValue : OpCodeData5, // 0xB5
        IReplyTo<RequestForReadOfAnEventVariable>,
        IHasNodeNumber,
        IHasEVIndex,
        IHasENIndex,
        IHasValue,
        IResponseToRequestForReadOfEvValue
    {
        #region Fields

        public const string CODE = "NEVAL";
        public const string DESCRIPTION = "This is response to REVAL (0x9C).";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Response to request for read of EV value";
        public const byte NUMBER = 0xB5; // 181
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public byte EVIndex
        {
            get => ConvertToByte(4);
            set => ConvertFromByte(4, value);
        }
        public byte ENIndex
        {
            get => ConvertToByte(3);
            set => ConvertFromByte(3, value);
        }
        public byte Value
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }

        #endregion

        #region Constructors

        public ResponseToRequestForReadOfEvValue(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public ResponseToRequestForReadOfEvValue() : base(CbusMessage.Create(new byte[] {181})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} ENIndex: {this.ENIndex} EVIndex: {this.EVIndex} Value: {this.Value:X2}";

        #endregion
	}
	
    #endregion

    #region 0xB6 PNN Response to Query Node

    /// <summary>
	/// PNN
    /// Response to Query Node
    /// Every node should send this message in response to a QNN (0x0D) message.
    /// </summary>
    [OpCode(
        Code = "PNN", 
        Description = "Every node should send this message in response to a QNN (0x0D) message.",
        Group = "General", 
        Name = "Response to Query Node", 
        Number = 182, 
        Priority = 3)]
    public partial class ResponseToQueryNode : OpCodeData5, // 0xB6
        IReplyTo<QueryNodeNumber>,
        IHasNodeNumber,
        IHasManufId,
        IHasModuleId,
        IHasNodeFlags,
        IResponseToQueryNode
    {
        #region Fields

        public const string CODE = "PNN";
        public const string DESCRIPTION = "Every node should send this message in response to a QNN (0x0D) message.";
        public const OpCodeGroup GROUP = OpCodeGroup.General;
        public const string NAME = "Response to Query Node";
        public const byte NUMBER = 0xB6; // 182
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public byte ManufId
        {
            get => ConvertToByte(3);
            set => ConvertFromByte(3, value);
        }
        public byte ModuleId
        {
            get => ConvertToByte(4);
            set => ConvertFromByte(4, value);
        }
        public NodeFlagsEnum NodeFlags
        {
            get => ConvertToEnum<NodeFlagsEnum>(5);
            set => ConvertFromEnum<NodeFlagsEnum>(5, value);
        }

        #endregion

        #region Constructors

        public ResponseToQueryNode(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public ResponseToQueryNode() : base(CbusMessage.Create(new byte[] {182})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} ManufId: {this.ManufId} ModuleId: {this.ModuleId} NodeFlags: {this.NodeFlags:F}";

        #endregion
	}
	
    #endregion

    #region 0xB8 ASON1 Accessory Short On 1

    /// <summary>
	/// ASON1
    /// Accessory Short On 1
    /// Indicates an ‘ON’ event using the short event number of 2 LS bytes with one added data byte.
    /// </summary>
    [OpCode(
        Code = "ASON1", 
        Description = "Indicates an ‘ON’ event using the short event number of 2 LS bytes with one added data byte.",
        Group = "Accessory", 
        Name = "Accessory Short On 1", 
        Number = 184, 
        Priority = 3)]
    public partial class AccessoryShortOn1 : OpCodeData5, // 0xB8
        IHasNodeNumber,
        IHasDeviceNumber,
        IHasData1,
        IAccessoryShortOn1
    {
        #region Fields

        public const string CODE = "ASON1";
        public const string DESCRIPTION = "Indicates an ‘ON’ event using the short event number of 2 LS bytes with one added data byte.";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Accessory Short On 1";
        public const byte NUMBER = 0xB8; // 184
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort DeviceNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }
        public byte Data1
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }

        #endregion

        #region Constructors

        public AccessoryShortOn1(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AccessoryShortOn1() : base(CbusMessage.Create(new byte[] {184})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} DeviceNumber: {this.DeviceNumber} Data1: {this.Data1:X2}";

        #endregion
	}
	
    #endregion

    #region 0xB9 ASOF1 Accessory Short Off 1

    /// <summary>
	/// ASOF1
    /// Accessory Short Off 1
    /// Indicates an ‘OFF’ event using the short event number of 2 LS bytes with one added data byte.
    /// </summary>
    [OpCode(
        Code = "ASOF1", 
        Description = "Indicates an ‘OFF’ event using the short event number of 2 LS bytes with one added data byte.",
        Group = "Accessory", 
        Name = "Accessory Short Off 1", 
        Number = 185, 
        Priority = 3)]
    public partial class AccessoryShortOff1 : OpCodeData5, // 0xB9
        IHasNodeNumber,
        IHasDeviceNumber,
        IHasData1,
        IAccessoryShortOff1
    {
        #region Fields

        public const string CODE = "ASOF1";
        public const string DESCRIPTION = "Indicates an ‘OFF’ event using the short event number of 2 LS bytes with one added data byte.";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Accessory Short Off 1";
        public const byte NUMBER = 0xB9; // 185
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort DeviceNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }
        public byte Data1
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }

        #endregion

        #region Constructors

        public AccessoryShortOff1(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AccessoryShortOff1() : base(CbusMessage.Create(new byte[] {185})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} DeviceNumber: {this.DeviceNumber} Data1: {this.Data1:X2}";

        #endregion
	}
	
    #endregion

    #region 0xBD ARSON1 Accessory Short Response On 1

    /// <summary>
	/// ARSON1
    /// Accessory Short Response On 1
    /// Indicates an ‘ON’ response event with one added data byte. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.
    /// </summary>
    [OpCode(
        Code = "ARSON1", 
        Description = "Indicates an ‘ON’ response event with one added data byte. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.",
        Group = "Accessory", 
        Name = "Accessory Short Response On 1", 
        Number = 189, 
        Priority = 3)]
    public partial class AccessoryShortResponseOn1 : OpCodeData5, // 0xBD
        IReplyTo<AccessoryShortRequestEvent>,
        IHasNodeNumber,
        IHasDeviceNumber,
        IHasData1,
        IAccessoryShortResponseOn1
    {
        #region Fields

        public const string CODE = "ARSON1";
        public const string DESCRIPTION = "Indicates an ‘ON’ response event with one added data byte. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Accessory Short Response On 1";
        public const byte NUMBER = 0xBD; // 189
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort DeviceNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }
        public byte Data1
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }

        #endregion

        #region Constructors

        public AccessoryShortResponseOn1(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AccessoryShortResponseOn1() : base(CbusMessage.Create(new byte[] {189})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} DeviceNumber: {this.DeviceNumber} Data1: {this.Data1:X2}";

        #endregion
	}
	
    #endregion

    #region 0xBE ARSOF1 Accessory Short Response Off 1

    /// <summary>
	/// ARSOF1
    /// Accessory Short Response Off 1
    /// Indicates an ‘OFF’ response event with one added data byte. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.
    /// </summary>
    [OpCode(
        Code = "ARSOF1", 
        Description = "Indicates an ‘OFF’ response event with one added data byte. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.",
        Group = "Accessory", 
        Name = "Accessory Short Response Off 1", 
        Number = 190, 
        Priority = 3)]
    public partial class AccessoryShortResponseOff1 : OpCodeData5, // 0xBE
        IReplyTo<AccessoryShortRequestEvent>,
        IHasNodeNumber,
        IHasDeviceNumber,
        IHasData1,
        IAccessoryShortResponseOff1
    {
        #region Fields

        public const string CODE = "ARSOF1";
        public const string DESCRIPTION = "Indicates an ‘OFF’ response event with one added data byte. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Accessory Short Response Off 1";
        public const byte NUMBER = 0xBE; // 190
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort DeviceNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }
        public byte Data1
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }

        #endregion

        #region Constructors

        public AccessoryShortResponseOff1(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AccessoryShortResponseOff1() : base(CbusMessage.Create(new byte[] {190})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} DeviceNumber: {this.DeviceNumber} Data1: {this.Data1:X2}";

        #endregion
	}
	
    #endregion

    #region 0xBF EXTC4 Extended opcode with 4 data bytes

    /// <summary>
	/// EXTC4
    /// Extended opcode with 4 data bytes
    /// Used if the basic set of 32 OPCs is not enough. Allows an additional 256 opcodes.
    /// </summary>
    [OpCode(
        Code = "EXTC4", 
        Description = "Used if the basic set of 32 OPCs is not enough. Allows an additional 256 opcodes.",
        Group = "General", 
        Name = "Extended opcode with 4 data bytes", 
        Number = 191, 
        Priority = 3)]
    public partial class ExtendedOpcodeWith4DataBytes : OpCodeData5, // 0xBF
        IHasExtendedOpCode,
        IHasData1,
        IHasData2,
        IHasData3,
        IHasData4,
        IExtendedOpcodeWith4DataBytes
    {
        #region Fields

        public const string CODE = "EXTC4";
        public const string DESCRIPTION = "Used if the basic set of 32 OPCs is not enough. Allows an additional 256 opcodes.";
        public const OpCodeGroup GROUP = OpCodeGroup.General;
        public const string NAME = "Extended opcode with 4 data bytes";
        public const byte NUMBER = 0xBF; // 191
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public byte ExtendedOpCode
        {
            get => ConvertToByte(1);
            set => ConvertFromByte(1, value);
        }
        public byte Data1
        {
            get => ConvertToByte(2);
            set => ConvertFromByte(2, value);
        }
        public byte Data2
        {
            get => ConvertToByte(3);
            set => ConvertFromByte(3, value);
        }
        public byte Data3
        {
            get => ConvertToByte(4);
            set => ConvertFromByte(4, value);
        }
        public byte Data4
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }

        #endregion

        #region Constructors

        public ExtendedOpcodeWith4DataBytes(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public ExtendedOpcodeWith4DataBytes() : base(CbusMessage.Create(new byte[] {191})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} ExtendedOpCode: {this.ExtendedOpCode:X2} Data1: {this.Data1:X2} Data2: {this.Data2:X2} Data3: {this.Data3:X2} Data4: {this.Data4:X2}";

        #endregion
	}
	
    #endregion

    #region 0xC0 RDCC5 Request 5 byte DCC Packet

    /// <summary>
	/// RDCC5
    /// Request 5 byte DCC Packet
    /// Allows a CAB or equivalent to request a 5 byte DCC packet to be sent to the track. The packet is sent <REP> times and is not refreshed on a regular basis.
    /// </summary>
    [OpCode(
        Code = "RDCC5", 
        Description = "Allows a CAB or equivalent to request a 5 byte DCC packet to be sent to the track. The packet is sent <REP> times and is not refreshed on a regular basis.",
        Group = "DCC", 
        Name = "Request 5 byte DCC Packet", 
        Number = 192, 
        Priority = 2)]
    public partial class Request5ByteDccPacket : OpCodeData6, // 0xC0
        IHasRepetitions,
        IHasData1,
        IHasData2,
        IHasData3,
        IHasData4,
        IHasData5,
        IRequest5ByteDccPacket
    {
        #region Fields

        public const string CODE = "RDCC5";
        public const string DESCRIPTION = "Allows a CAB or equivalent to request a 5 byte DCC packet to be sent to the track. The packet is sent <REP> times and is not refreshed on a regular basis.";
        public const OpCodeGroup GROUP = OpCodeGroup.DCC;
        public const string NAME = "Request 5 byte DCC Packet";
        public const byte NUMBER = 0xC0; // 192
        public const int PRIORITY = 2;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public byte Repetitions
        {
            get => ConvertToByte(1);
            set => ConvertFromByte(1, value);
        }
        public byte Data1
        {
            get => ConvertToByte(2);
            set => ConvertFromByte(2, value);
        }
        public byte Data2
        {
            get => ConvertToByte(3);
            set => ConvertFromByte(3, value);
        }
        public byte Data3
        {
            get => ConvertToByte(4);
            set => ConvertFromByte(4, value);
        }
        public byte Data4
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }
        public byte Data5
        {
            get => ConvertToByte(6);
            set => ConvertFromByte(6, value);
        }

        #endregion

        #region Constructors

        public Request5ByteDccPacket(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public Request5ByteDccPacket() : base(CbusMessage.Create(new byte[] {192})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} Repetitions: {this.Repetitions} Data1: {this.Data1:X2} Data2: {this.Data2:X2} Data3: {this.Data3:X2} Data4: {this.Data4:X2} Data5: {this.Data5:X2}";

        #endregion
	}
	
    #endregion

    #region 0xC1 WCVOA Write CV (byte) in OPS mode by address

    /// <summary>
	/// WCVOA
    /// Write CV (byte) in OPS mode by address
    /// Sent to the command station to write a DCC CV byte in OPS mode to specific loco (on the main). Used by computer based ops mode programmer that does not have a valid throttle handle.
    /// </summary>
    [OpCode(
        Code = "WCVOA", 
        Description = "Sent to the command station to write a DCC CV byte in OPS mode to specific loco (on the main). Used by computer based ops mode programmer that does not have a valid throttle handle.",
        Group = "DCC", 
        Name = "Write CV (byte) in OPS mode by address", 
        Number = 193, 
        Priority = 2)]
    public partial class WriteCvByteInOpsModeByAddress : OpCodeData6, // 0xC1
        IHasAddress,
        IHasCV,
        IHasMode,
        IHasValue,
        IWriteCvByteInOpsModeByAddress
    {
        #region Fields

        public const string CODE = "WCVOA";
        public const string DESCRIPTION = "Sent to the command station to write a DCC CV byte in OPS mode to specific loco (on the main). Used by computer based ops mode programmer that does not have a valid throttle handle.";
        public const OpCodeGroup GROUP = OpCodeGroup.DCC;
        public const string NAME = "Write CV (byte) in OPS mode by address";
        public const byte NUMBER = 0xC1; // 193
        public const int PRIORITY = 2;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort Address
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort CV
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }
        public byte Mode
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }
        public byte Value
        {
            get => ConvertToByte(6);
            set => ConvertFromByte(6, value);
        }

        #endregion

        #region Constructors

        public WriteCvByteInOpsModeByAddress(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public WriteCvByteInOpsModeByAddress() : base(CbusMessage.Create(new byte[] {193})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} Address: {this.Address} CV: {this.CV} Mode: {this.Mode} Value: {this.Value:X2}";

        #endregion
	}
	
    #endregion

    #region 0xCF FCLK Fast Clock

    /// <summary>
	/// FCLK
    /// Fast Clock
    /// Used to implement a fast clock for the layout.
    /// </summary>
    [OpCode(
        Code = "FCLK", 
        Description = "Used to implement a fast clock for the layout.",
        Group = "Accessory", 
        Name = "Fast Clock", 
        Number = 207, 
        Priority = 3)]
    public partial class FastClock : OpCodeData6, // 0xCF
        IHasMinutes,
        IHasHours,
        IHasWeekday,
        IHasMonth,
        IHasDiv,
        IHasMonthDay,
        IHasTemperature,
        IFastClock
    {
        #region Fields

        public const string CODE = "FCLK";
        public const string DESCRIPTION = "Used to implement a fast clock for the layout.";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Fast Clock";
        public const byte NUMBER = 0xCF; // 207
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public byte Minutes
        {
            get => ConvertToByte(1);
            set => ConvertFromByte(1, value);
        }
        public byte Hours
        {
            get => ConvertToByte(2);
            set => ConvertFromByte(2, value);
        }
        public WeekdayEnum Weekday
        {
            get => ConvertToEnum<WeekdayEnum>(3, new int[] { 0,1,2,3 });
            set => ConvertFromEnum<WeekdayEnum>(3, new int[] { 0,1,2,3 }, value);
        }
        public MonthEnum Month
        {
            get => ConvertToEnum<MonthEnum>(3, new int[] { 4,5,6,7 });
            set => ConvertFromEnum<MonthEnum>(3, new int[] { 4,5,6,7 }, value);
        }
        public byte Div
        {
            get => ConvertToByte(4);
            set => ConvertFromByte(4, value);
        }
        public byte MonthDay
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }
        public byte Temperature
        {
            get => ConvertToByte(6);
            set => ConvertFromByte(6, value);
        }

        #endregion

        #region Constructors

        public FastClock(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public FastClock() : base(CbusMessage.Create(new byte[] {207})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} Minutes: {this.Minutes} Hours: {this.Hours} Weekday: {this.Weekday:F} Month: {this.Month:F} Div: {this.Div:X2} MonthDay: {this.MonthDay} Temperature: {this.Temperature}";

        #endregion
	}
	
    #endregion

    #region 0xD0 ACON2 Accessory On 2

    /// <summary>
	/// ACON2
    /// Accessory On 2
    /// Indicates an ‘ON’ event using the full event number of 4 bytes with two additional data bytes.
    /// </summary>
    [OpCode(
        Code = "ACON2", 
        Description = "Indicates an ‘ON’ event using the full event number of 4 bytes with two additional data bytes.",
        Group = "Accessory", 
        Name = "Accessory On 2", 
        Number = 208, 
        Priority = 3)]
    public partial class AccessoryOn2 : OpCodeData6, // 0xD0
        IHasNodeNumber,
        IHasEventNumber,
        IHasData1,
        IHasData2,
        IAccessoryOn2
    {
        #region Fields

        public const string CODE = "ACON2";
        public const string DESCRIPTION = "Indicates an ‘ON’ event using the full event number of 4 bytes with two additional data bytes.";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Accessory On 2";
        public const byte NUMBER = 0xD0; // 208
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort EventNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }
        public byte Data1
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }
        public byte Data2
        {
            get => ConvertToByte(6);
            set => ConvertFromByte(6, value);
        }

        #endregion

        #region Constructors

        public AccessoryOn2(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AccessoryOn2() : base(CbusMessage.Create(new byte[] {208})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} EventNumber: {this.EventNumber} Data1: {this.Data1:X2} Data2: {this.Data2:X2}";

        #endregion
	}
	
    #endregion

    #region 0xD1 ACOF2 Accessory Off 2

    /// <summary>
	/// ACOF2
    /// Accessory Off 2
    /// Indicates an ‘OFF’ event using the full event number of 4 bytes with two additional data bytes.
    /// </summary>
    [OpCode(
        Code = "ACOF2", 
        Description = "Indicates an ‘OFF’ event using the full event number of 4 bytes with two additional data bytes.",
        Group = "Accessory", 
        Name = "Accessory Off 2", 
        Number = 209, 
        Priority = 3)]
    public partial class AccessoryOff2 : OpCodeData6, // 0xD1
        IHasNodeNumber,
        IHasEventNumber,
        IHasData1,
        IHasData2,
        IAccessoryOff2
    {
        #region Fields

        public const string CODE = "ACOF2";
        public const string DESCRIPTION = "Indicates an ‘OFF’ event using the full event number of 4 bytes with two additional data bytes.";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Accessory Off 2";
        public const byte NUMBER = 0xD1; // 209
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort EventNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }
        public byte Data1
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }
        public byte Data2
        {
            get => ConvertToByte(6);
            set => ConvertFromByte(6, value);
        }

        #endregion

        #region Constructors

        public AccessoryOff2(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AccessoryOff2() : base(CbusMessage.Create(new byte[] {209})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} EventNumber: {this.EventNumber} Data1: {this.Data1:X2} Data2: {this.Data2:X2}";

        #endregion
	}
	
    #endregion

    #region 0xD2 EVLRN Teach an event in learn mode

    /// <summary>
	/// EVLRN
    /// Teach an event in learn mode
    /// Sent by a configuration tool to a node in learn mode to teach it an event. Also teaches it the associated event variables (EVs) by the EV index (EV#). This command is repeated for each EV required.
    /// </summary>
    [OpCode(
        Code = "EVLRN", 
        Description = "Sent by a configuration tool to a node in learn mode to teach it an event. Also teaches it the associated event variables (EVs) by the EV index (EV#). This command is repeated for each EV required.",
        Group = "Config", 
        Name = "Teach an event in learn mode", 
        Number = 210, 
        Priority = 3)]
    public partial class TeachAnEventInLearnMode : OpCodeData6, // 0xD2
        IHasNodeNumber,
        IHasEventNumber,
        IHasEVIndex,
        IHasValue,
        ITeachAnEventInLearnMode
    {
        #region Fields

        public const string CODE = "EVLRN";
        public const string DESCRIPTION = "Sent by a configuration tool to a node in learn mode to teach it an event. Also teaches it the associated event variables (EVs) by the EV index (EV#). This command is repeated for each EV required.";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Teach an event in learn mode";
        public const byte NUMBER = 0xD2; // 210
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort EventNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }
        public byte EVIndex
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }
        public byte Value
        {
            get => ConvertToByte(6);
            set => ConvertFromByte(6, value);
        }

        #endregion

        #region Constructors

        public TeachAnEventInLearnMode(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public TeachAnEventInLearnMode() : base(CbusMessage.Create(new byte[] {210})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} EventNumber: {this.EventNumber} EVIndex: {this.EVIndex} Value: {this.Value:X2}";

        #endregion
	}
	
    #endregion

    #region 0xD3 EVANS Response to a request for an EV value in a node in learn mode

    /// <summary>
	/// EVANS
    /// Response to a request for an EV value in a node in learn mode
    /// A node response to a request from a configuration tool for the EVs associated with an event REQEV (0xB2). For multiple EVs
    /// </summary>
    [OpCode(
        Code = "EVANS", 
        Description = "A node response to a request from a configuration tool for the EVs associated with an event REQEV (0xB2). For multiple EVs",
        Group = "Config", 
        Name = "Response to a request for an EV value in a node in learn mode", 
        Number = 211, 
        Priority = 3)]
    public partial class ResponseToARequestForAnEvValueInANodeInLearnMode : OpCodeData6, // 0xD3
        IReplyTo<ReadEventVariableInLearnMode>,
        IHasNodeNumber,
        IHasEventNumber,
        IHasEVIndex,
        IHasValue,
        IResponseToARequestForAnEvValueInANodeInLearnMode
    {
        #region Fields

        public const string CODE = "EVANS";
        public const string DESCRIPTION = "A node response to a request from a configuration tool for the EVs associated with an event REQEV (0xB2). For multiple EVs";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Response to a request for an EV value in a node in learn mode";
        public const byte NUMBER = 0xD3; // 211
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort EventNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }
        public byte EVIndex
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }
        public byte Value
        {
            get => ConvertToByte(6);
            set => ConvertFromByte(6, value);
        }

        #endregion

        #region Constructors

        public ResponseToARequestForAnEvValueInANodeInLearnMode(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public ResponseToARequestForAnEvValueInANodeInLearnMode() : base(CbusMessage.Create(new byte[] {211})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} EventNumber: {this.EventNumber} EVIndex: {this.EVIndex} Value: {this.Value:X2}";

        #endregion
	}
	
    #endregion

    #region 0xD4 ARON2 Accessory On Response Event 2

    /// <summary>
	/// ARON2
    /// Accessory On Response Event 2
    /// Indicates an ‘ON’ response event with two added data bytes. A response event is a reply to a status request AREQ (0x92) without producing an ON or OFF event.
    /// </summary>
    [OpCode(
        Code = "ARON2", 
        Description = "Indicates an ‘ON’ response event with two added data bytes. A response event is a reply to a status request AREQ (0x92) without producing an ON or OFF event.",
        Group = "Accessory", 
        Name = "Accessory On Response Event 2", 
        Number = 212, 
        Priority = 3)]
    public partial class AccessoryOnResponseEvent2 : OpCodeData6, // 0xD4
        IReplyTo<AccessoryRequestEvent>,
        IHasNodeNumber,
        IHasEventNumber,
        IHasData1,
        IHasData2,
        IAccessoryOnResponseEvent2
    {
        #region Fields

        public const string CODE = "ARON2";
        public const string DESCRIPTION = "Indicates an ‘ON’ response event with two added data bytes. A response event is a reply to a status request AREQ (0x92) without producing an ON or OFF event.";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Accessory On Response Event 2";
        public const byte NUMBER = 0xD4; // 212
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort EventNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }
        public byte Data1
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }
        public byte Data2
        {
            get => ConvertToByte(6);
            set => ConvertFromByte(6, value);
        }

        #endregion

        #region Constructors

        public AccessoryOnResponseEvent2(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AccessoryOnResponseEvent2() : base(CbusMessage.Create(new byte[] {212})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} EventNumber: {this.EventNumber} Data1: {this.Data1:X2} Data2: {this.Data2:X2}";

        #endregion
	}
	
    #endregion

    #region 0xD5 AROF2 Accessory Off Response Event 2

    /// <summary>
	/// AROF2
    /// Accessory Off Response Event 2
    /// Indicates an ‘OFF’ response event with two added data bytes. A response event is a reply to a status request AREQ (0x92) without producing an ON or OFF event.
    /// </summary>
    [OpCode(
        Code = "AROF2", 
        Description = "Indicates an ‘OFF’ response event with two added data bytes. A response event is a reply to a status request AREQ (0x92) without producing an ON or OFF event.",
        Group = "Accessory", 
        Name = "Accessory Off Response Event 2", 
        Number = 213, 
        Priority = 3)]
    public partial class AccessoryOffResponseEvent2 : OpCodeData6, // 0xD5
        IReplyTo<AccessoryRequestEvent>,
        IHasNodeNumber,
        IHasEventNumber,
        IHasData1,
        IHasData2,
        IAccessoryOffResponseEvent2
    {
        #region Fields

        public const string CODE = "AROF2";
        public const string DESCRIPTION = "Indicates an ‘OFF’ response event with two added data bytes. A response event is a reply to a status request AREQ (0x92) without producing an ON or OFF event.";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Accessory Off Response Event 2";
        public const byte NUMBER = 0xD5; // 213
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort EventNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }
        public byte Data1
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }
        public byte Data2
        {
            get => ConvertToByte(6);
            set => ConvertFromByte(6, value);
        }

        #endregion

        #region Constructors

        public AccessoryOffResponseEvent2(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AccessoryOffResponseEvent2() : base(CbusMessage.Create(new byte[] {213})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} EventNumber: {this.EventNumber} Data1: {this.Data1:X2} Data2: {this.Data2:X2}";

        #endregion
	}
	
    #endregion

    #region 0xD8 ASON2 Accessory Short On 2

    /// <summary>
	/// ASON2
    /// Accessory Short On 2
    /// Indicates an ‘ON’ event using the short event number of 2 LS bytes with two added data bytes.
    /// </summary>
    [OpCode(
        Code = "ASON2", 
        Description = "Indicates an ‘ON’ event using the short event number of 2 LS bytes with two added data bytes.",
        Group = "Accessory", 
        Name = "Accessory Short On 2", 
        Number = 216, 
        Priority = 3)]
    public partial class AccessoryShortOn2 : OpCodeData6, // 0xD8
        IHasNodeNumber,
        IHasDeviceNumber,
        IHasData1,
        IHasData2,
        IAccessoryShortOn2
    {
        #region Fields

        public const string CODE = "ASON2";
        public const string DESCRIPTION = "Indicates an ‘ON’ event using the short event number of 2 LS bytes with two added data bytes.";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Accessory Short On 2";
        public const byte NUMBER = 0xD8; // 216
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort DeviceNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }
        public byte Data1
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }
        public byte Data2
        {
            get => ConvertToByte(6);
            set => ConvertFromByte(6, value);
        }

        #endregion

        #region Constructors

        public AccessoryShortOn2(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AccessoryShortOn2() : base(CbusMessage.Create(new byte[] {216})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} DeviceNumber: {this.DeviceNumber} Data1: {this.Data1:X2} Data2: {this.Data2:X2}";

        #endregion
	}
	
    #endregion

    #region 0xD9 ASOF2 Accessory Short Off 2

    /// <summary>
	/// ASOF2
    /// Accessory Short Off 2
    /// Indicates an ‘OFF’ event using the short event number of 2 LS bytes with two added data bytes.
    /// </summary>
    [OpCode(
        Code = "ASOF2", 
        Description = "Indicates an ‘OFF’ event using the short event number of 2 LS bytes with two added data bytes.",
        Group = "Accessory", 
        Name = "Accessory Short Off 2", 
        Number = 217, 
        Priority = 3)]
    public partial class AccessoryShortOff2 : OpCodeData6, // 0xD9
        IHasNodeNumber,
        IHasDeviceNumber,
        IHasData1,
        IHasData2,
        IAccessoryShortOff2
    {
        #region Fields

        public const string CODE = "ASOF2";
        public const string DESCRIPTION = "Indicates an ‘OFF’ event using the short event number of 2 LS bytes with two added data bytes.";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Accessory Short Off 2";
        public const byte NUMBER = 0xD9; // 217
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort DeviceNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }
        public byte Data1
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }
        public byte Data2
        {
            get => ConvertToByte(6);
            set => ConvertFromByte(6, value);
        }

        #endregion

        #region Constructors

        public AccessoryShortOff2(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AccessoryShortOff2() : base(CbusMessage.Create(new byte[] {217})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} DeviceNumber: {this.DeviceNumber} Data1: {this.Data1:X2} Data2: {this.Data2:X2}";

        #endregion
	}
	
    #endregion

    #region 0xDD ARSON2 Accessory Short Response On 2

    /// <summary>
	/// ARSON2
    /// Accessory Short Response On 2
    /// Indicates an ‘ON’ response event with two added data bytes. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.
    /// </summary>
    [OpCode(
        Code = "ARSON2", 
        Description = "Indicates an ‘ON’ response event with two added data bytes. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.",
        Group = "Accessory", 
        Name = "Accessory Short Response On 2", 
        Number = 221, 
        Priority = 3)]
    public partial class AccessoryShortResponseOn2 : OpCodeData6, // 0xDD
        IReplyTo<AccessoryShortRequestEvent>,
        IHasNodeNumber,
        IHasDeviceNumber,
        IHasData1,
        IHasData2,
        IAccessoryShortResponseOn2
    {
        #region Fields

        public const string CODE = "ARSON2";
        public const string DESCRIPTION = "Indicates an ‘ON’ response event with two added data bytes. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Accessory Short Response On 2";
        public const byte NUMBER = 0xDD; // 221
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort DeviceNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }
        public byte Data1
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }
        public byte Data2
        {
            get => ConvertToByte(6);
            set => ConvertFromByte(6, value);
        }

        #endregion

        #region Constructors

        public AccessoryShortResponseOn2(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AccessoryShortResponseOn2() : base(CbusMessage.Create(new byte[] {221})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} DeviceNumber: {this.DeviceNumber} Data1: {this.Data1:X2} Data2: {this.Data2:X2}";

        #endregion
	}
	
    #endregion

    #region 0xDE ARSOF2 Accessory Short Response Off 2

    /// <summary>
	/// ARSOF2
    /// Accessory Short Response Off 2
    /// Indicates an ‘OFF’ response event with two added data bytes. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.
    /// </summary>
    [OpCode(
        Code = "ARSOF2", 
        Description = "Indicates an ‘OFF’ response event with two added data bytes. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.",
        Group = "Accessory", 
        Name = "Accessory Short Response Off 2", 
        Number = 222, 
        Priority = 3)]
    public partial class AccessoryShortResponseOff2 : OpCodeData6, // 0xDE
        IReplyTo<AccessoryShortRequestEvent>,
        IHasNodeNumber,
        IHasDeviceNumber,
        IHasData1,
        IHasData2,
        IAccessoryShortResponseOff2
    {
        #region Fields

        public const string CODE = "ARSOF2";
        public const string DESCRIPTION = "Indicates an ‘OFF’ response event with two added data bytes. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Accessory Short Response Off 2";
        public const byte NUMBER = 0xDE; // 222
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort DeviceNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }
        public byte Data1
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }
        public byte Data2
        {
            get => ConvertToByte(6);
            set => ConvertFromByte(6, value);
        }

        #endregion

        #region Constructors

        public AccessoryShortResponseOff2(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AccessoryShortResponseOff2() : base(CbusMessage.Create(new byte[] {222})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} DeviceNumber: {this.DeviceNumber} Data1: {this.Data1:X2} Data2: {this.Data2:X2}";

        #endregion
	}
	
    #endregion

    #region 0xDF EXTC5 Extended opcode with 5 data bytes

    /// <summary>
	/// EXTC5
    /// Extended opcode with 5 data bytes
    /// Used if the basic set of 32 OPCs is not enough. Allows an additional 256 opcodes.
    /// </summary>
    [OpCode(
        Code = "EXTC5", 
        Description = "Used if the basic set of 32 OPCs is not enough. Allows an additional 256 opcodes.",
        Group = "General", 
        Name = "Extended opcode with 5 data bytes", 
        Number = 223, 
        Priority = 3)]
    public partial class ExtendedOpcodeWith5DataBytes : OpCodeData6, // 0xDF
        IHasExtendedOpCode,
        IHasData1,
        IHasData2,
        IHasData3,
        IHasData4,
        IHasData5,
        IExtendedOpcodeWith5DataBytes
    {
        #region Fields

        public const string CODE = "EXTC5";
        public const string DESCRIPTION = "Used if the basic set of 32 OPCs is not enough. Allows an additional 256 opcodes.";
        public const OpCodeGroup GROUP = OpCodeGroup.General;
        public const string NAME = "Extended opcode with 5 data bytes";
        public const byte NUMBER = 0xDF; // 223
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public byte ExtendedOpCode
        {
            get => ConvertToByte(1);
            set => ConvertFromByte(1, value);
        }
        public byte Data1
        {
            get => ConvertToByte(2);
            set => ConvertFromByte(2, value);
        }
        public byte Data2
        {
            get => ConvertToByte(3);
            set => ConvertFromByte(3, value);
        }
        public byte Data3
        {
            get => ConvertToByte(4);
            set => ConvertFromByte(4, value);
        }
        public byte Data4
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }
        public byte Data5
        {
            get => ConvertToByte(6);
            set => ConvertFromByte(6, value);
        }

        #endregion

        #region Constructors

        public ExtendedOpcodeWith5DataBytes(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public ExtendedOpcodeWith5DataBytes() : base(CbusMessage.Create(new byte[] {223})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} ExtendedOpCode: {this.ExtendedOpCode:X2} Data1: {this.Data1:X2} Data2: {this.Data2:X2} Data3: {this.Data3:X2} Data4: {this.Data4:X2} Data5: {this.Data5:X2}";

        #endregion
	}
	
    #endregion

    #region 0xE0 RDCC6 Request 6 byte DCC packet

    /// <summary>
	/// RDCC6
    /// Request 6 byte DCC packet
    /// Allows a CAB or equivalent to request a 6 byte DCC packet to be sent to the track. The packet is sent <REP> times and is not refreshed on a regular basis.
    /// </summary>
    [OpCode(
        Code = "RDCC6", 
        Description = "Allows a CAB or equivalent to request a 6 byte DCC packet to be sent to the track. The packet is sent <REP> times and is not refreshed on a regular basis.",
        Group = "DCC", 
        Name = "Request 6 byte DCC packet", 
        Number = 224, 
        Priority = 2)]
    public partial class Request6ByteDccPacket : OpCodeData7, // 0xE0
        IHasRepetitions,
        IHasData1,
        IHasData2,
        IHasData3,
        IHasData4,
        IHasData5,
        IHasData6,
        IRequest6ByteDccPacket
    {
        #region Fields

        public const string CODE = "RDCC6";
        public const string DESCRIPTION = "Allows a CAB or equivalent to request a 6 byte DCC packet to be sent to the track. The packet is sent <REP> times and is not refreshed on a regular basis.";
        public const OpCodeGroup GROUP = OpCodeGroup.DCC;
        public const string NAME = "Request 6 byte DCC packet";
        public const byte NUMBER = 0xE0; // 224
        public const int PRIORITY = 2;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public byte Repetitions
        {
            get => ConvertToByte(1);
            set => ConvertFromByte(1, value);
        }
        public byte Data1
        {
            get => ConvertToByte(2);
            set => ConvertFromByte(2, value);
        }
        public byte Data2
        {
            get => ConvertToByte(3);
            set => ConvertFromByte(3, value);
        }
        public byte Data3
        {
            get => ConvertToByte(4);
            set => ConvertFromByte(4, value);
        }
        public byte Data4
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }
        public byte Data5
        {
            get => ConvertToByte(6);
            set => ConvertFromByte(6, value);
        }
        public byte Data6
        {
            get => ConvertToByte(7);
            set => ConvertFromByte(7, value);
        }

        #endregion

        #region Constructors

        public Request6ByteDccPacket(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public Request6ByteDccPacket() : base(CbusMessage.Create(new byte[] {224})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} Repetitions: {this.Repetitions} Data1: {this.Data1:X2} Data2: {this.Data2:X2} Data3: {this.Data3:X2} Data4: {this.Data4:X2} Data5: {this.Data5:X2} Data6: {this.Data6:X2}";

        #endregion
	}
	
    #endregion

    #region 0xE1 PLOC Engine report

    /// <summary>
	/// PLOC
    /// Engine report
    /// A report of an engine entry sent by the command station. Sent in response to QLOC (0x22) or as an acknowledgement of acquiring an engine requested by a cab (RLOC (0x40) or GLOC (0x61)).
    /// </summary>
    [OpCode(
        Code = "PLOC", 
        Description = "A report of an engine entry sent by the command station. Sent in response to QLOC (0x22) or as an acknowledgement of acquiring an engine requested by a cab (RLOC (0x40) or GLOC (0x61)).",
        Group = "DCC", 
        Name = "Engine report", 
        Number = 225, 
        Priority = 2)]
    public partial class EngineReport : OpCodeData7, // 0xE1
        IReplyTo<QueryEngine>,
        IReplyTo<RequestEngineSession>,
        IReplyTo<QueryConsist>,
        IHasSession,
        IHasAddress,
        IHasSpeedDir,
        IHasFn1,
        IHasFn2,
        IHasFn3,
        IEngineReport
    {
        #region Fields

        public const string CODE = "PLOC";
        public const string DESCRIPTION = "A report of an engine entry sent by the command station. Sent in response to QLOC (0x22) or as an acknowledgement of acquiring an engine requested by a cab (RLOC (0x40) or GLOC (0x61)).";
        public const OpCodeGroup GROUP = OpCodeGroup.DCC;
        public const string NAME = "Engine report";
        public const byte NUMBER = 0xE1; // 225
        public const int PRIORITY = 2;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public byte Session
        {
            get => ConvertToByte(1);
            set => ConvertFromByte(1, value);
        }
        public ushort Address
        {
            get => ConvertToUShort(new int[] { 2,3 });
            set => ConvertFromUShort(new int[] { 2,3 }, value);
        }
        public byte SpeedDir
        {
            get => ConvertToByte(4);
            set => ConvertFromByte(4, value);
        }
        public byte Fn1
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }
        public byte Fn2
        {
            get => ConvertToByte(6);
            set => ConvertFromByte(6, value);
        }
        public byte Fn3
        {
            get => ConvertToByte(7);
            set => ConvertFromByte(7, value);
        }

        #endregion

        #region Constructors

        public EngineReport(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public EngineReport() : base(CbusMessage.Create(new byte[] {225})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} Session: {this.Session} Address: {this.Address} SpeedDir: {this.SpeedDir} Fn1: {this.Fn1} Fn2: {this.Fn2} Fn3: {this.Fn3}";

        #endregion
	}
	
    #endregion

    #region 0xE2 NAME Response to request for node name string

    /// <summary>
	/// NAME
    /// Response to request for node name string
    /// A node response while in ‘setup’ mode for its name string. Reply to RQMN (0x11). The Module Name prefix
    /// </summary>
    [OpCode(
        Code = "NAME", 
        Description = "A node response while in ‘setup’ mode for its name string. Reply to RQMN (0x11). The Module Name prefix",
        Group = "Config", 
        Name = "Response to request for node name string", 
        Number = 226, 
        Priority = 3)]
    public partial class ResponseToRequestForNodeNameString : OpCodeData7, // 0xE2
        IReplyTo<RequestModuleName>,
        IHasChar1,
        IHasChar2,
        IHasChar3,
        IHasChar4,
        IHasChar5,
        IHasChar6,
        IHasChar7,
        IResponseToRequestForNodeNameString
    {
        #region Fields

        public const string CODE = "NAME";
        public const string DESCRIPTION = "A node response while in ‘setup’ mode for its name string. Reply to RQMN (0x11). The Module Name prefix";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Response to request for node name string";
        public const byte NUMBER = 0xE2; // 226
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public char Char1
        {
            get => ConvertToChar(1);
            set => ConvertFromChar(1, value);
        }
        public char Char2
        {
            get => ConvertToChar(2);
            set => ConvertFromChar(2, value);
        }
        public char Char3
        {
            get => ConvertToChar(3);
            set => ConvertFromChar(3, value);
        }
        public char Char4
        {
            get => ConvertToChar(4);
            set => ConvertFromChar(4, value);
        }
        public char Char5
        {
            get => ConvertToChar(5);
            set => ConvertFromChar(5, value);
        }
        public char Char6
        {
            get => ConvertToChar(6);
            set => ConvertFromChar(6, value);
        }
        public char Char7
        {
            get => ConvertToChar(7);
            set => ConvertFromChar(7, value);
        }

        #endregion

        #region Constructors

        public ResponseToRequestForNodeNameString(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public ResponseToRequestForNodeNameString() : base(CbusMessage.Create(new byte[] {226})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} Char1: {this.Char1} Char2: {this.Char2} Char3: {this.Char3} Char4: {this.Char4} Char5: {this.Char5} Char6: {this.Char6} Char7: {this.Char7}";

        #endregion
	}
	
    #endregion

    #region 0xE3 STAT Command Station status report

    /// <summary>
	/// STAT
    /// Command Station status report
    /// Sent by the command station in response to RSTAT (0x0C).
    /// </summary>
    [OpCode(
        Code = "STAT", 
        Description = "Sent by the command station in response to RSTAT (0x0C).",
        Group = "DCC", 
        Name = "Command Station status report", 
        Number = 227, 
        Priority = 2)]
    public partial class CommandStationStatusReport : OpCodeData7, // 0xE3
        IReplyTo<RequestCommandStationStatus>,
        IHasNodeNumber,
        IHasCSNumber,
        IHasCSFlags,
        IHasMajor,
        IHasMinor,
        IHasBuild,
        ICommandStationStatusReport
    {
        #region Fields

        public const string CODE = "STAT";
        public const string DESCRIPTION = "Sent by the command station in response to RSTAT (0x0C).";
        public const OpCodeGroup GROUP = OpCodeGroup.DCC;
        public const string NAME = "Command Station status report";
        public const byte NUMBER = 0xE3; // 227
        public const int PRIORITY = 2;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public byte CSNumber
        {
            get => ConvertToByte(3);
            set => ConvertFromByte(3, value);
        }
        public CSFlagsEnum CSFlags
        {
            get => ConvertToEnum<CSFlagsEnum>(4);
            set => ConvertFromEnum<CSFlagsEnum>(4, value);
        }
        public byte Major
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }
        public byte Minor
        {
            get => ConvertToByte(6);
            set => ConvertFromByte(6, value);
        }
        public byte Build
        {
            get => ConvertToByte(7);
            set => ConvertFromByte(7, value);
        }

        #endregion

        #region Constructors

        public CommandStationStatusReport(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public CommandStationStatusReport() : base(CbusMessage.Create(new byte[] {227})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} CSNumber: {this.CSNumber} CSFlags: {this.CSFlags:F} Major: {this.Major} Minor: {this.Minor} Build: {this.Build}";

        #endregion
	}
	
    #endregion

    #region 0xEF PARAMS Response to request for node parameters

    /// <summary>
	/// PARAMS
    /// Response to request for node parameters
    /// A node response while in ‘setup’ mode for its parameter string. Reply to RQNP (0x10).
    /// </summary>
    [OpCode(
        Code = "PARAMS", 
        Description = "A node response while in ‘setup’ mode for its parameter string. Reply to RQNP (0x10).",
        Group = "Config", 
        Name = "Response to request for node parameters", 
        Number = 239, 
        Priority = 3)]
    public partial class ResponseToRequestForNodeParameters : OpCodeData7, // 0xEF
        IReplyTo<RequestNodeParameters>,
        IHasParam1,
        IHasParam2,
        IHasParam3,
        IHasParam4,
        IHasParam5,
        IHasParam6,
        IHasParam7,
        IResponseToRequestForNodeParameters
    {
        #region Fields

        public const string CODE = "PARAMS";
        public const string DESCRIPTION = "A node response while in ‘setup’ mode for its parameter string. Reply to RQNP (0x10).";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Response to request for node parameters";
        public const byte NUMBER = 0xEF; // 239
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public byte Param1
        {
            get => ConvertToByte(1);
            set => ConvertFromByte(1, value);
        }
        public byte Param2
        {
            get => ConvertToByte(2);
            set => ConvertFromByte(2, value);
        }
        public byte Param3
        {
            get => ConvertToByte(3);
            set => ConvertFromByte(3, value);
        }
        public byte Param4
        {
            get => ConvertToByte(4);
            set => ConvertFromByte(4, value);
        }
        public byte Param5
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }
        public byte Param6
        {
            get => ConvertToByte(6);
            set => ConvertFromByte(6, value);
        }
        public byte Param7
        {
            get => ConvertToByte(7);
            set => ConvertFromByte(7, value);
        }

        #endregion

        #region Constructors

        public ResponseToRequestForNodeParameters(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public ResponseToRequestForNodeParameters() : base(CbusMessage.Create(new byte[] {239})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} Param1: {this.Param1:X2} Param2: {this.Param2:X2} Param3: {this.Param3:X2} Param4: {this.Param4:X2} Param5: {this.Param5:X2} Param6: {this.Param6:X2} Param7: {this.Param7:X2}";

        #endregion
	}
	
    #endregion

    #region 0xF0 ACON3 Accessory On 3

    /// <summary>
	/// ACON3
    /// Accessory On 3
    /// Indicates an ‘ON’ event using the full event number of 4 bytes with three additional data bytes.
    /// </summary>
    [OpCode(
        Code = "ACON3", 
        Description = "Indicates an ‘ON’ event using the full event number of 4 bytes with three additional data bytes.",
        Group = "Accessory", 
        Name = "Accessory On 3", 
        Number = 240, 
        Priority = 3)]
    public partial class AccessoryOn3 : OpCodeData7, // 0xF0
        IHasNodeNumber,
        IHasEventNumber,
        IHasData1,
        IHasData2,
        IHasData3,
        IAccessoryOn3
    {
        #region Fields

        public const string CODE = "ACON3";
        public const string DESCRIPTION = "Indicates an ‘ON’ event using the full event number of 4 bytes with three additional data bytes.";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Accessory On 3";
        public const byte NUMBER = 0xF0; // 240
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort EventNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }
        public byte Data1
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }
        public byte Data2
        {
            get => ConvertToByte(6);
            set => ConvertFromByte(6, value);
        }
        public byte Data3
        {
            get => ConvertToByte(7);
            set => ConvertFromByte(7, value);
        }

        #endregion

        #region Constructors

        public AccessoryOn3(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AccessoryOn3() : base(CbusMessage.Create(new byte[] {240})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} EventNumber: {this.EventNumber} Data1: {this.Data1:X2} Data2: {this.Data2:X2} Data3: {this.Data3:X2}";

        #endregion
	}
	
    #endregion

    #region 0xF1 ACOF3 Accessory Off 3

    /// <summary>
	/// ACOF3
    /// Accessory Off 3
    /// Indicates an ‘OFF’ event using the full event number of 4 bytes with three additional data bytes.
    /// </summary>
    [OpCode(
        Code = "ACOF3", 
        Description = "Indicates an ‘OFF’ event using the full event number of 4 bytes with three additional data bytes.",
        Group = "Accessory", 
        Name = "Accessory Off 3", 
        Number = 241, 
        Priority = 3)]
    public partial class AccessoryOff3 : OpCodeData7, // 0xF1
        IHasNodeNumber,
        IHasEventNumber,
        IHasData1,
        IHasData2,
        IHasData3,
        IAccessoryOff3
    {
        #region Fields

        public const string CODE = "ACOF3";
        public const string DESCRIPTION = "Indicates an ‘OFF’ event using the full event number of 4 bytes with three additional data bytes.";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Accessory Off 3";
        public const byte NUMBER = 0xF1; // 241
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort EventNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }
        public byte Data1
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }
        public byte Data2
        {
            get => ConvertToByte(6);
            set => ConvertFromByte(6, value);
        }
        public byte Data3
        {
            get => ConvertToByte(7);
            set => ConvertFromByte(7, value);
        }

        #endregion

        #region Constructors

        public AccessoryOff3(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AccessoryOff3() : base(CbusMessage.Create(new byte[] {241})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} EventNumber: {this.EventNumber} Data1: {this.Data1:X2} Data2: {this.Data2:X2} Data3: {this.Data3:X2}";

        #endregion
	}
	
    #endregion

    #region 0xF2 ENRSP Response to request to read node events

    /// <summary>
	/// ENRSP
    /// Response to request to read node events
    /// This is a response to either NERD (0x57) or NENRD (0x72).
    /// </summary>
    [OpCode(
        Code = "ENRSP", 
        Description = "This is a response to either NERD (0x57) or NENRD (0x72).",
        Group = "Config", 
        Name = "Response to request to read node events", 
        Number = 242, 
        Priority = 3)]
    public partial class ResponseToRequestToReadNodeEvents : OpCodeData7, // 0xF2
        IReplyTo<ReadBackAllStoredEventsInANode>,
        IReplyTo<RequestReadOfStoredEventsByEventIndex>,
        IHasNodeNumber,
        IHasEventData,
        IHasENIndex,
        IResponseToRequestToReadNodeEvents
    {
        #region Fields

        public const string CODE = "ENRSP";
        public const string DESCRIPTION = "This is a response to either NERD (0x57) or NENRD (0x72).";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Response to request to read node events";
        public const byte NUMBER = 0xF2; // 242
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public uint EventData
        {
            get => ConvertToUInt(new int[] { 3,4,5,6 });
            set => ConvertFromUInt(new int[] { 3,4,5,6 }, value);
        }
        public byte ENIndex
        {
            get => ConvertToByte(7);
            set => ConvertFromByte(7, value);
        }

        #endregion

        #region Constructors

        public ResponseToRequestToReadNodeEvents(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public ResponseToRequestToReadNodeEvents() : base(CbusMessage.Create(new byte[] {242})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} EventData: {this.EventData:X2} ENIndex: {this.ENIndex}";

        #endregion
	}
	
    #endregion

    #region 0xF3 ARON3 Accessory On Response Event 3

    /// <summary>
	/// ARON3
    /// Accessory On Response Event 3
    /// Indicates an ‘ON’ response event with three added data bytes. A response event is a reply to a status request AREQ (0x92) without producing an ON or OFF event.
    /// </summary>
    [OpCode(
        Code = "ARON3", 
        Description = "Indicates an ‘ON’ response event with three added data bytes. A response event is a reply to a status request AREQ (0x92) without producing an ON or OFF event.",
        Group = "Accessory", 
        Name = "Accessory On Response Event 3", 
        Number = 243, 
        Priority = 3)]
    public partial class AccessoryOnResponseEvent3 : OpCodeData7, // 0xF3
        IReplyTo<AccessoryRequestEvent>,
        IHasNodeNumber,
        IHasEventNumber,
        IHasData1,
        IHasData2,
        IHasData3,
        IAccessoryOnResponseEvent3
    {
        #region Fields

        public const string CODE = "ARON3";
        public const string DESCRIPTION = "Indicates an ‘ON’ response event with three added data bytes. A response event is a reply to a status request AREQ (0x92) without producing an ON or OFF event.";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Accessory On Response Event 3";
        public const byte NUMBER = 0xF3; // 243
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort EventNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }
        public byte Data1
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }
        public byte Data2
        {
            get => ConvertToByte(6);
            set => ConvertFromByte(6, value);
        }
        public byte Data3
        {
            get => ConvertToByte(7);
            set => ConvertFromByte(7, value);
        }

        #endregion

        #region Constructors

        public AccessoryOnResponseEvent3(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AccessoryOnResponseEvent3() : base(CbusMessage.Create(new byte[] {243})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} EventNumber: {this.EventNumber} Data1: {this.Data1:X2} Data2: {this.Data2:X2} Data3: {this.Data3:X2}";

        #endregion
	}
	
    #endregion

    #region 0xF4 AROF3 Accessory Off Response Event 3

    /// <summary>
	/// AROF3
    /// Accessory Off Response Event 3
    /// Indicates an ‘OFF’ response event with three added data bytes. A response event is a reply to a status request AREQ (0x92) without producing an ON or OFF event.
    /// </summary>
    [OpCode(
        Code = "AROF3", 
        Description = "Indicates an ‘OFF’ response event with three added data bytes. A response event is a reply to a status request AREQ (0x92) without producing an ON or OFF event.",
        Group = "Accessory", 
        Name = "Accessory Off Response Event 3", 
        Number = 244, 
        Priority = 3)]
    public partial class AccessoryOffResponseEvent3 : OpCodeData7, // 0xF4
        IReplyTo<AccessoryRequestEvent>,
        IHasNodeNumber,
        IHasEventNumber,
        IHasData1,
        IHasData2,
        IHasData3,
        IAccessoryOffResponseEvent3
    {
        #region Fields

        public const string CODE = "AROF3";
        public const string DESCRIPTION = "Indicates an ‘OFF’ response event with three added data bytes. A response event is a reply to a status request AREQ (0x92) without producing an ON or OFF event.";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Accessory Off Response Event 3";
        public const byte NUMBER = 0xF4; // 244
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort EventNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }
        public byte Data1
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }
        public byte Data2
        {
            get => ConvertToByte(6);
            set => ConvertFromByte(6, value);
        }
        public byte Data3
        {
            get => ConvertToByte(7);
            set => ConvertFromByte(7, value);
        }

        #endregion

        #region Constructors

        public AccessoryOffResponseEvent3(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AccessoryOffResponseEvent3() : base(CbusMessage.Create(new byte[] {244})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} EventNumber: {this.EventNumber} Data1: {this.Data1:X2} Data2: {this.Data2:X2} Data3: {this.Data3:X2}";

        #endregion
	}
	
    #endregion

    #region 0xF5 EVLRNI Teach an event in learn mode using event indexing

    /// <summary>
	/// EVLRNI
    /// Teach an event in learn mode using event indexing
    /// Sent by a configuration tool to a node in learn mode to teach it an event. The event index must be known. Also teaches it the associated event variables.(EVs). This command is repeated for each EV required.
    /// </summary>
    [OpCode(
        Code = "EVLRNI", 
        Description = "Sent by a configuration tool to a node in learn mode to teach it an event. The event index must be known. Also teaches it the associated event variables.(EVs). This command is repeated for each EV required.",
        Group = "Config", 
        Name = "Teach an event in learn mode using event indexing", 
        Number = 245, 
        Priority = 3)]
    public partial class TeachAnEventInLearnModeUsingEventIndexing : OpCodeData7, // 0xF5
        IHasNodeNumber,
        IHasEventNumber,
        IHasENIndex,
        IHasEVIndex,
        IHasValue,
        ITeachAnEventInLearnModeUsingEventIndexing
    {
        #region Fields

        public const string CODE = "EVLRNI";
        public const string DESCRIPTION = "Sent by a configuration tool to a node in learn mode to teach it an event. The event index must be known. Also teaches it the associated event variables.(EVs). This command is repeated for each EV required.";
        public const OpCodeGroup GROUP = OpCodeGroup.Config;
        public const string NAME = "Teach an event in learn mode using event indexing";
        public const byte NUMBER = 0xF5; // 245
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort EventNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }
        public byte ENIndex
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }
        public byte EVIndex
        {
            get => ConvertToByte(6);
            set => ConvertFromByte(6, value);
        }
        public byte Value
        {
            get => ConvertToByte(7);
            set => ConvertFromByte(7, value);
        }

        #endregion

        #region Constructors

        public TeachAnEventInLearnModeUsingEventIndexing(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public TeachAnEventInLearnModeUsingEventIndexing() : base(CbusMessage.Create(new byte[] {245})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} EventNumber: {this.EventNumber} ENIndex: {this.ENIndex} EVIndex: {this.EVIndex} Value: {this.Value:X2}";

        #endregion
	}
	
    #endregion

    #region 0xF6 ACDAT Accessory node data event

    /// <summary>
	/// ACDAT
    /// Accessory node data event
    /// Indicates an event from this node with 5 bytes of data. For example
    /// </summary>
    [OpCode(
        Code = "ACDAT", 
        Description = "Indicates an event from this node with 5 bytes of data. For example",
        Group = "Accessory", 
        Name = "Accessory node data event", 
        Number = 246, 
        Priority = 3)]
    public partial class AccessoryNodeDataEvent : OpCodeData7, // 0xF6
        IHasNodeNumber,
        IHasData1,
        IHasData2,
        IHasData3,
        IHasData4,
        IHasData5,
        IAccessoryNodeDataEvent
    {
        #region Fields

        public const string CODE = "ACDAT";
        public const string DESCRIPTION = "Indicates an event from this node with 5 bytes of data. For example";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Accessory node data event";
        public const byte NUMBER = 0xF6; // 246
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public byte Data1
        {
            get => ConvertToByte(3);
            set => ConvertFromByte(3, value);
        }
        public byte Data2
        {
            get => ConvertToByte(4);
            set => ConvertFromByte(4, value);
        }
        public byte Data3
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }
        public byte Data4
        {
            get => ConvertToByte(6);
            set => ConvertFromByte(6, value);
        }
        public byte Data5
        {
            get => ConvertToByte(7);
            set => ConvertFromByte(7, value);
        }

        #endregion

        #region Constructors

        public AccessoryNodeDataEvent(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AccessoryNodeDataEvent() : base(CbusMessage.Create(new byte[] {246})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} Data1: {this.Data1:X2} Data2: {this.Data2:X2} Data3: {this.Data3:X2} Data4: {this.Data4:X2} Data5: {this.Data5:X2}";

        #endregion
	}
	
    #endregion

    #region 0xF7 ARDAT Accessory node data Response

    /// <summary>
	/// ARDAT
    /// Accessory node data Response
    /// Indicates a node data response. A response event is a reply to a status request RQDAT (0x5A) without producing a new data event.
    /// </summary>
    [OpCode(
        Code = "ARDAT", 
        Description = "Indicates a node data response. A response event is a reply to a status request RQDAT (0x5A) without producing a new data event.",
        Group = "Accessory", 
        Name = "Accessory node data Response", 
        Number = 247, 
        Priority = 3)]
    public partial class AccessoryNodeDataResponse : OpCodeData7, // 0xF7
        IReplyTo<RequestNodeDataEvent>,
        IHasNodeNumber,
        IHasData1,
        IHasData2,
        IHasData3,
        IHasData4,
        IHasData5,
        IAccessoryNodeDataResponse
    {
        #region Fields

        public const string CODE = "ARDAT";
        public const string DESCRIPTION = "Indicates a node data response. A response event is a reply to a status request RQDAT (0x5A) without producing a new data event.";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Accessory node data Response";
        public const byte NUMBER = 0xF7; // 247
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public byte Data1
        {
            get => ConvertToByte(3);
            set => ConvertFromByte(3, value);
        }
        public byte Data2
        {
            get => ConvertToByte(4);
            set => ConvertFromByte(4, value);
        }
        public byte Data3
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }
        public byte Data4
        {
            get => ConvertToByte(6);
            set => ConvertFromByte(6, value);
        }
        public byte Data5
        {
            get => ConvertToByte(7);
            set => ConvertFromByte(7, value);
        }

        #endregion

        #region Constructors

        public AccessoryNodeDataResponse(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AccessoryNodeDataResponse() : base(CbusMessage.Create(new byte[] {247})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} Data1: {this.Data1:X2} Data2: {this.Data2:X2} Data3: {this.Data3:X2} Data4: {this.Data4:X2} Data5: {this.Data5:X2}";

        #endregion
	}
	
    #endregion

    #region 0xF8 ASON3 Accessory Short On 3

    /// <summary>
	/// ASON3
    /// Accessory Short On 3
    /// Indicates an ‘ON’ event using the short event number of 2 LS bytes with three added data bytes.
    /// </summary>
    [OpCode(
        Code = "ASON3", 
        Description = "Indicates an ‘ON’ event using the short event number of 2 LS bytes with three added data bytes.",
        Group = "Accessory", 
        Name = "Accessory Short On 3", 
        Number = 248, 
        Priority = 3)]
    public partial class AccessoryShortOn3 : OpCodeData7, // 0xF8
        IHasNodeNumber,
        IHasDeviceNumber,
        IHasData1,
        IHasData2,
        IHasData3,
        IAccessoryShortOn3
    {
        #region Fields

        public const string CODE = "ASON3";
        public const string DESCRIPTION = "Indicates an ‘ON’ event using the short event number of 2 LS bytes with three added data bytes.";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Accessory Short On 3";
        public const byte NUMBER = 0xF8; // 248
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort DeviceNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }
        public byte Data1
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }
        public byte Data2
        {
            get => ConvertToByte(6);
            set => ConvertFromByte(6, value);
        }
        public byte Data3
        {
            get => ConvertToByte(7);
            set => ConvertFromByte(7, value);
        }

        #endregion

        #region Constructors

        public AccessoryShortOn3(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AccessoryShortOn3() : base(CbusMessage.Create(new byte[] {248})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} DeviceNumber: {this.DeviceNumber} Data1: {this.Data1:X2} Data2: {this.Data2:X2} Data3: {this.Data3:X2}";

        #endregion
	}
	
    #endregion

    #region 0xF9 ASOF3 Accessory Short Off 3

    /// <summary>
	/// ASOF3
    /// Accessory Short Off 3
    /// Indicates an ‘OFF’ event using the short event number of 2 LS bytes with three added data bytes.
    /// </summary>
    [OpCode(
        Code = "ASOF3", 
        Description = "Indicates an ‘OFF’ event using the short event number of 2 LS bytes with three added data bytes.",
        Group = "Accessory", 
        Name = "Accessory Short Off 3", 
        Number = 249, 
        Priority = 3)]
    public partial class AccessoryShortOff3 : OpCodeData7, // 0xF9
        IHasNodeNumber,
        IHasDeviceNumber,
        IHasData1,
        IHasData2,
        IHasData3,
        IAccessoryShortOff3
    {
        #region Fields

        public const string CODE = "ASOF3";
        public const string DESCRIPTION = "Indicates an ‘OFF’ event using the short event number of 2 LS bytes with three added data bytes.";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Accessory Short Off 3";
        public const byte NUMBER = 0xF9; // 249
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort DeviceNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }
        public byte Data1
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }
        public byte Data2
        {
            get => ConvertToByte(6);
            set => ConvertFromByte(6, value);
        }
        public byte Data3
        {
            get => ConvertToByte(7);
            set => ConvertFromByte(7, value);
        }

        #endregion

        #region Constructors

        public AccessoryShortOff3(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AccessoryShortOff3() : base(CbusMessage.Create(new byte[] {249})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} DeviceNumber: {this.DeviceNumber} Data1: {this.Data1:X2} Data2: {this.Data2:X2} Data3: {this.Data3:X2}";

        #endregion
	}
	
    #endregion

    #region 0xFA DDES Device data event (short mode)

    /// <summary>
	/// DDES
    /// Device data event (short mode)
    /// Function is the same as ACDAT (0xF6) but uses device addressing so can relate data to a device attached to a node. e.g. one of several RFID readers attached to a single node.
    /// </summary>
    [OpCode(
        Code = "DDES", 
        Description = "Function is the same as ACDAT (0xF6) but uses device addressing so can relate data to a device attached to a node. e.g. one of several RFID readers attached to a single node.",
        Group = "Accessory", 
        Name = "Device data event (short mode)", 
        Number = 250, 
        Priority = 3)]
    public partial class DeviceDataEventShortMode : OpCodeData7, // 0xFA
        IHasDeviceNumber,
        IHasData1,
        IHasData2,
        IHasData3,
        IHasData4,
        IHasData5,
        IDeviceDataEventShortMode
    {
        #region Fields

        public const string CODE = "DDES";
        public const string DESCRIPTION = "Function is the same as ACDAT (0xF6) but uses device addressing so can relate data to a device attached to a node. e.g. one of several RFID readers attached to a single node.";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Device data event (short mode)";
        public const byte NUMBER = 0xFA; // 250
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort DeviceNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public byte Data1
        {
            get => ConvertToByte(3);
            set => ConvertFromByte(3, value);
        }
        public byte Data2
        {
            get => ConvertToByte(4);
            set => ConvertFromByte(4, value);
        }
        public byte Data3
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }
        public byte Data4
        {
            get => ConvertToByte(6);
            set => ConvertFromByte(6, value);
        }
        public byte Data5
        {
            get => ConvertToByte(7);
            set => ConvertFromByte(7, value);
        }

        #endregion

        #region Constructors

        public DeviceDataEventShortMode(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public DeviceDataEventShortMode() : base(CbusMessage.Create(new byte[] {250})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} DeviceNumber: {this.DeviceNumber} Data1: {this.Data1:X2} Data2: {this.Data2:X2} Data3: {this.Data3:X2} Data4: {this.Data4:X2} Data5: {this.Data5:X2}";

        #endregion
	}
	
    #endregion

    #region 0xFB DDRS Device data response (short mode)

    /// <summary>
	/// DDRS
    /// Device data response (short mode)
    /// The response to a request for data from a device RQDDS (0x5B).
    /// </summary>
    [OpCode(
        Code = "DDRS", 
        Description = "The response to a request for data from a device RQDDS (0x5B).",
        Group = "Accessory", 
        Name = "Device data response (short mode)", 
        Number = 251, 
        Priority = 3)]
    public partial class DeviceDataResponseShortMode : OpCodeData7, // 0xFB
        IReplyTo<RequestDeviceDataShortMode>,
        IHasDeviceNumber,
        IHasData1,
        IHasData2,
        IHasData3,
        IHasData4,
        IHasData5,
        IDeviceDataResponseShortMode
    {
        #region Fields

        public const string CODE = "DDRS";
        public const string DESCRIPTION = "The response to a request for data from a device RQDDS (0x5B).";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Device data response (short mode)";
        public const byte NUMBER = 0xFB; // 251
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort DeviceNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public byte Data1
        {
            get => ConvertToByte(3);
            set => ConvertFromByte(3, value);
        }
        public byte Data2
        {
            get => ConvertToByte(4);
            set => ConvertFromByte(4, value);
        }
        public byte Data3
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }
        public byte Data4
        {
            get => ConvertToByte(6);
            set => ConvertFromByte(6, value);
        }
        public byte Data5
        {
            get => ConvertToByte(7);
            set => ConvertFromByte(7, value);
        }

        #endregion

        #region Constructors

        public DeviceDataResponseShortMode(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public DeviceDataResponseShortMode() : base(CbusMessage.Create(new byte[] {251})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} DeviceNumber: {this.DeviceNumber} Data1: {this.Data1:X2} Data2: {this.Data2:X2} Data3: {this.Data3:X2} Data4: {this.Data4:X2} Data5: {this.Data5:X2}";

        #endregion
	}
	
    #endregion

    #region 0xFD ARSON3 Accessory Short Response On 3

    /// <summary>
	/// ARSON3
    /// Accessory Short Response On 3
    /// Indicates an ‘ON’ response event with with three added data bytes. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.
    /// </summary>
    [OpCode(
        Code = "ARSON3", 
        Description = "Indicates an ‘ON’ response event with with three added data bytes. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.",
        Group = "Accessory", 
        Name = "Accessory Short Response On 3", 
        Number = 253, 
        Priority = 3)]
    public partial class AccessoryShortResponseOn3 : OpCodeData7, // 0xFD
        IReplyTo<AccessoryShortRequestEvent>,
        IHasNodeNumber,
        IHasDeviceNumber,
        IHasData1,
        IHasData2,
        IHasData3,
        IAccessoryShortResponseOn3
    {
        #region Fields

        public const string CODE = "ARSON3";
        public const string DESCRIPTION = "Indicates an ‘ON’ response event with with three added data bytes. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Accessory Short Response On 3";
        public const byte NUMBER = 0xFD; // 253
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort DeviceNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }
        public byte Data1
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }
        public byte Data2
        {
            get => ConvertToByte(6);
            set => ConvertFromByte(6, value);
        }
        public byte Data3
        {
            get => ConvertToByte(7);
            set => ConvertFromByte(7, value);
        }

        #endregion

        #region Constructors

        public AccessoryShortResponseOn3(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AccessoryShortResponseOn3() : base(CbusMessage.Create(new byte[] {253})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} DeviceNumber: {this.DeviceNumber} Data1: {this.Data1:X2} Data2: {this.Data2:X2} Data3: {this.Data3:X2}";

        #endregion
	}
	
    #endregion

    #region 0xFE ARSOF3 Accessory Short Response Off 3

    /// <summary>
	/// ARSOF3
    /// Accessory Short Response Off 3
    /// Indicates an ‘OFF’ response event with with three added data bytes. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.
    /// </summary>
    [OpCode(
        Code = "ARSOF3", 
        Description = "Indicates an ‘OFF’ response event with with three added data bytes. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.",
        Group = "Accessory", 
        Name = "Accessory Short Response Off 3", 
        Number = 254, 
        Priority = 3)]
    public partial class AccessoryShortResponseOff3 : OpCodeData7, // 0xFE
        IReplyTo<AccessoryShortRequestEvent>,
        IHasNodeNumber,
        IHasDeviceNumber,
        IHasData1,
        IHasData2,
        IHasData3,
        IAccessoryShortResponseOff3
    {
        #region Fields

        public const string CODE = "ARSOF3";
        public const string DESCRIPTION = "Indicates an ‘OFF’ response event with with three added data bytes. A response event is a reply to a status request ASRQ (0x9A) without producing an ON or OFF event.";
        public const OpCodeGroup GROUP = OpCodeGroup.Accessory;
        public const string NAME = "Accessory Short Response Off 3";
        public const byte NUMBER = 0xFE; // 254
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public ushort NodeNumber
        {
            get => ConvertToUShort(new int[] { 1,2 });
            set => ConvertFromUShort(new int[] { 1,2 }, value);
        }
        public ushort DeviceNumber
        {
            get => ConvertToUShort(new int[] { 3,4 });
            set => ConvertFromUShort(new int[] { 3,4 }, value);
        }
        public byte Data1
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }
        public byte Data2
        {
            get => ConvertToByte(6);
            set => ConvertFromByte(6, value);
        }
        public byte Data3
        {
            get => ConvertToByte(7);
            set => ConvertFromByte(7, value);
        }

        #endregion

        #region Constructors

        public AccessoryShortResponseOff3(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public AccessoryShortResponseOff3() : base(CbusMessage.Create(new byte[] {254})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} NodeNumber: {this.NodeNumber} DeviceNumber: {this.DeviceNumber} Data1: {this.Data1:X2} Data2: {this.Data2:X2} Data3: {this.Data3:X2}";

        #endregion
	}
	
    #endregion

    #region 0xFF EXTC6 Extended opcode with 6 data bytes

    /// <summary>
	/// EXTC6
    /// Extended opcode with 6 data bytes
    /// Used if the basic set of 32 OPCs is not enough. Allows an additional 256 opcodes.
    /// </summary>
    [OpCode(
        Code = "EXTC6", 
        Description = "Used if the basic set of 32 OPCs is not enough. Allows an additional 256 opcodes.",
        Group = "General", 
        Name = "Extended opcode with 6 data bytes", 
        Number = 255, 
        Priority = 3)]
    public partial class ExtendedOpcodeWith6DataBytes : OpCodeData7, // 0xFF
        IHasExtendedOpCode,
        IHasData1,
        IHasData2,
        IHasData3,
        IHasData4,
        IHasData5,
        IHasData6,
        IExtendedOpcodeWith6DataBytes
    {
        #region Fields

        public const string CODE = "EXTC6";
        public const string DESCRIPTION = "Used if the basic set of 32 OPCs is not enough. Allows an additional 256 opcodes.";
        public const OpCodeGroup GROUP = OpCodeGroup.General;
        public const string NAME = "Extended opcode with 6 data bytes";
        public const byte NUMBER = 0xFF; // 255
        public const int PRIORITY = 3;

        #endregion

        #region Override properties

        public override string Code => CODE;
        public override string Description => DESCRIPTION;
        public override OpCodeGroup Group => GROUP;
        public override string Name => NAME;
        public override byte Number => NUMBER;
        public override int Priority => PRIORITY;

        #endregion

        #region Properties

        public byte ExtendedOpCode
        {
            get => ConvertToByte(1);
            set => ConvertFromByte(1, value);
        }
        public byte Data1
        {
            get => ConvertToByte(2);
            set => ConvertFromByte(2, value);
        }
        public byte Data2
        {
            get => ConvertToByte(3);
            set => ConvertFromByte(3, value);
        }
        public byte Data3
        {
            get => ConvertToByte(4);
            set => ConvertFromByte(4, value);
        }
        public byte Data4
        {
            get => ConvertToByte(5);
            set => ConvertFromByte(5, value);
        }
        public byte Data5
        {
            get => ConvertToByte(6);
            set => ConvertFromByte(6, value);
        }
        public byte Data6
        {
            get => ConvertToByte(7);
            set => ConvertFromByte(7, value);
        }

        #endregion

        #region Constructors

        public ExtendedOpcodeWith6DataBytes(ICbusMessage cbusMessage) : base(cbusMessage) { }
        public ExtendedOpcodeWith6DataBytes() : base(CbusMessage.Create(new byte[] {255})) {}

        #endregion

        #region Overrides

        public override string ToString() => $"{this.Code} ExtendedOpCode: {this.ExtendedOpCode:X2} Data1: {this.Data1:X2} Data2: {this.Data2:X2} Data3: {this.Data3:X2} Data4: {this.Data4:X2} Data5: {this.Data5:X2} Data6: {this.Data6:X2}";

        #endregion
	}
	
    #endregion

    #endregion
}
